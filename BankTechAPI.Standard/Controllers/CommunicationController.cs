/*
 * BankTechAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Utilities;
using BankTechAPI.Standard.Http.Request;
using BankTechAPI.Standard.Http.Response;
using BankTechAPI.Standard.Http.Client;
using BankTechAPI.Standard.Exceptions;

namespace BankTechAPI.Standard.Controllers
{
    public partial class CommunicationController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static CommunicationController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static CommunicationController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new CommunicationController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Send a WhatsApp message to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.WhatsappMessageSuccesfullySent response from the API call</return>
        public Models.WhatsappMessageSuccesfullySent CreateSendAWhatsAppMessage(double xApiVersion, string contentType, Models.SendAWhatsAppMessageToAMobileNumberRequest body)
        {
            Task<Models.WhatsappMessageSuccesfullySent> t = CreateSendAWhatsAppMessageAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Send a WhatsApp message to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.WhatsappMessageSuccesfullySent response from the API call</return>
        public async Task<Models.WhatsappMessageSuccesfullySent> CreateSendAWhatsAppMessageAsync(double xApiVersion, string contentType, Models.SendAWhatsAppMessageToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.WhatsappMessageSuccesfullySent>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Send a templated WhatsApp message to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.TemplatedWhatsappMessageSuccesfullySent> response from the API call</return>
        public List<Models.TemplatedWhatsappMessageSuccesfullySent> CreateTemplatedWhatsAppMessage(double xApiVersion, string contentType, Models.SendATemplatedWhatsAppMessageToAMobileNumberRequest body)
        {
            Task<List<Models.TemplatedWhatsappMessageSuccesfullySent>> t = CreateTemplatedWhatsAppMessageAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Send a templated WhatsApp message to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.TemplatedWhatsappMessageSuccesfullySent> response from the API call</return>
        public async Task<List<Models.TemplatedWhatsappMessageSuccesfullySent>> CreateTemplatedWhatsAppMessageAsync(double xApiVersion, string contentType, Models.SendATemplatedWhatsAppMessageToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/template");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<Models.TemplatedWhatsappMessageSuccesfullySent>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Send an image through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSendAnImageViaWhatsApp(double xApiVersion, string contentType, Models.SendAnImageThroughWhatsAppToAMobileNumberRequest body)
        {
            Task t = CreateSendAnImageViaWhatsAppAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Send an image through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSendAnImageViaWhatsAppAsync(double xApiVersion, string contentType, Models.SendAnImageThroughWhatsAppToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/image");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Send a document through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSendADocumentViaWhatsApp(double xApiVersion, string contentType, Models.SendADocumentThroughWhatsAppToAMobileNumberRequest body)
        {
            Task t = CreateSendADocumentViaWhatsAppAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Send a document through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSendADocumentViaWhatsAppAsync(double xApiVersion, string contentType, Models.SendADocumentThroughWhatsAppToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/document");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Send an audio file through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSendAnAudioFileViaWhatsApp(double xApiVersion, string contentType, Models.SendAnAudioFileThroughWhatsAppToAMobileNumberRequest body)
        {
            Task t = CreateSendAnAudioFileViaWhatsAppAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Send an audio file through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSendAnAudioFileViaWhatsAppAsync(double xApiVersion, string contentType, Models.SendAnAudioFileThroughWhatsAppToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/audio");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Send an video file through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSendAnVideoFileViaWhatsApp(double xApiVersion, string contentType, Models.SendAnVideoFileThroughWhatsAppToAMobileNumberRequest body)
        {
            Task t = CreateSendAnVideoFileViaWhatsAppAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Send an video file through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSendAnVideoFileViaWhatsAppAsync(double xApiVersion, string contentType, Models.SendAnVideoFileThroughWhatsAppToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/video");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Send an SMS to a mobile number.
        /// SMS banking solutions can be used in the following ways: 
        /// - Notify consumers instantly of account transactions
        /// - Allow customers to monitor their account activity
        /// - Use one time passwords to reduce fraud and theft
        /// etc.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SMSSuccesfullySent response from the API call</return>
        public Models.SMSSuccesfullySent CreateSendAnSMS(double xApiVersion, string contentType, Models.SendAnSMSToAMobileNumberRequest body)
        {
            Task<Models.SMSSuccesfullySent> t = CreateSendAnSMSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Send an SMS to a mobile number.
        /// SMS banking solutions can be used in the following ways: 
        /// - Notify consumers instantly of account transactions
        /// - Allow customers to monitor their account activity
        /// - Use one time passwords to reduce fraud and theft
        /// etc.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.SMSSuccesfullySent response from the API call</return>
        public async Task<Models.SMSSuccesfullySent> CreateSendAnSMSAsync(double xApiVersion, string contentType, Models.SendAnSMSToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/sms");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.SMSSuccesfullySent>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Send a templated SMS to a mobile number.
        /// Examples of what templated SMS's can be used for:
        /// - Notifying consumers instantly of account transactions
        /// - Send payment reminders
        /// - Effect debt collection
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.TemplatedSMSSuccesfullySent> response from the API call</return>
        public List<Models.TemplatedSMSSuccesfullySent> CreateSendATemplatedSMS(double xApiVersion, string contentType, Models.SendATemplatedSMSToAMobileNumberRequest body)
        {
            Task<List<Models.TemplatedSMSSuccesfullySent>> t = CreateSendATemplatedSMSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Send a templated SMS to a mobile number.
        /// Examples of what templated SMS's can be used for:
        /// - Notifying consumers instantly of account transactions
        /// - Send payment reminders
        /// - Effect debt collection
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.TemplatedSMSSuccesfullySent> response from the API call</return>
        public async Task<List<Models.TemplatedSMSSuccesfullySent>> CreateSendATemplatedSMSAsync(double xApiVersion, string contentType, Models.SendATemplatedSMSToAMobileNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/sms/template");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<Models.TemplatedSMSSuccesfullySent>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// Send a location through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSendALocationViaWhatsApp(double xApiVersion, string contentType, Models.SendALocationThroughWhatsAppToAMobileNumber body)
        {
            Task t = CreateSendALocationViaWhatsAppAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Send a location through WhatsApp to a mobile number.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSendALocationViaWhatsAppAsync(double xApiVersion, string contentType, Models.SendALocationThroughWhatsAppToAMobileNumber body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Communication/whatsapp/location");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 