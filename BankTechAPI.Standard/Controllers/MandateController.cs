/*
 * BankTechAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Utilities;
using BankTechAPI.Standard.Http.Request;
using BankTechAPI.Standard.Http.Response;
using BankTechAPI.Standard.Http.Client;
using BankTechAPI.Standard.Exceptions;

namespace BankTechAPI.Standard.Controllers
{
    public partial class MandateController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static MandateController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static MandateController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new MandateController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Get a single registered mandate matching the provided mandate ID.
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required) The Mandate Identification whose mandate you would like returned.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateReturned response from the API call</return>
        public Models.MandateReturned GetASingleRegisteredMandate(string mandateIdentification, double xApiVersion)
        {
            Task<Models.MandateReturned> t = GetASingleRegisteredMandateAsync(mandateIdentification, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// Get a single registered mandate matching the provided mandate ID.
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required) The Mandate Identification whose mandate you would like returned.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateReturned response from the API call</return>
        public async Task<Models.MandateReturned> GetASingleRegisteredMandateAsync(string mandateIdentification, double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/{mandateIdentification}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mandateIdentification", mandateIdentification }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// ?? Confusing
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required)</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Request Parameters</param>
        /// <return>Returns the Models.MandateBankAccountVerificationStatusSet response from the API call</return>
        public Models.MandateBankAccountVerificationStatusSet CreateVerifyAMandatesDebtorBankAccount(
                string mandateIdentification,
                double xApiVersion,
                string contentType,
                Models.VerifyAMandatesDebtorBankAccountRequest body)
        {
            Task<Models.MandateBankAccountVerificationStatusSet> t = CreateVerifyAMandatesDebtorBankAccountAsync(mandateIdentification, xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// ?? Confusing
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required)</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Request Parameters</param>
        /// <return>Returns the Models.MandateBankAccountVerificationStatusSet response from the API call</return>
        public async Task<Models.MandateBankAccountVerificationStatusSet> CreateVerifyAMandatesDebtorBankAccountAsync(
                string mandateIdentification,
                double xApiVersion,
                string contentType,
                Models.VerifyAMandatesDebtorBankAccountRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/{mandateIdentification}/bank-account-verification");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mandateIdentification", mandateIdentification }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateBankAccountVerificationStatusSet>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// For a specific mandate (with a specific mandate ID), verify the debtor.
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required)</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateVerificationStatusSet response from the API call</return>
        public Models.MandateVerificationStatusSet CreateVerifyAMandatesDebtorIdentification(
                string mandateIdentification,
                double xApiVersion,
                string contentType,
                Models.VerifyAMandatesDebtorIdentificationRequest body)
        {
            Task<Models.MandateVerificationStatusSet> t = CreateVerifyAMandatesDebtorIdentificationAsync(mandateIdentification, xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// For a specific mandate (with a specific mandate ID), verify the debtor.
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required)</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateVerificationStatusSet response from the API call</return>
        public async Task<Models.MandateVerificationStatusSet> CreateVerifyAMandatesDebtorIdentificationAsync(
                string mandateIdentification,
                double xApiVersion,
                string contentType,
                Models.VerifyAMandatesDebtorIdentificationRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/{mandateIdentification}/profile-id-verification");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "mandateIdentification", mandateIdentification }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateVerificationStatusSet>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="mandateStatus">Required parameter: Example: </param>
        /// <param name="initiationDateStart">Required parameter: Example: </param>
        /// <param name="initiationDateEnd">Required parameter: Example: </param>
        /// <param name="releaseDateStart">Required parameter: Example: </param>
        /// <param name="releaseDateEnd">Required parameter: Example: </param>
        /// <param name="collectionFrequency">Required parameter: Example: </param>
        /// <param name="collectionDay">Required parameter: Example: </param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateListReturned response from the API call</return>
        public Models.MandateListReturned GetASummaryListOfRegisteredMandatesMatchingTheProvidedParameters(
                string mandateStatus,
                string initiationDateStart,
                string initiationDateEnd,
                string releaseDateStart,
                string releaseDateEnd,
                string collectionFrequency,
                string collectionDay,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            Task<Models.MandateListReturned> t = GetASummaryListOfRegisteredMandatesMatchingTheProvidedParametersAsync(mandateStatus, initiationDateStart, initiationDateEnd, releaseDateStart, releaseDateEnd, collectionFrequency, collectionDay, pageNumber, pageSize, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="mandateStatus">Required parameter: Example: </param>
        /// <param name="initiationDateStart">Required parameter: Example: </param>
        /// <param name="initiationDateEnd">Required parameter: Example: </param>
        /// <param name="releaseDateStart">Required parameter: Example: </param>
        /// <param name="releaseDateEnd">Required parameter: Example: </param>
        /// <param name="collectionFrequency">Required parameter: Example: </param>
        /// <param name="collectionDay">Required parameter: Example: </param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateListReturned response from the API call</return>
        public async Task<Models.MandateListReturned> GetASummaryListOfRegisteredMandatesMatchingTheProvidedParametersAsync(
                string mandateStatus,
                string initiationDateStart,
                string initiationDateEnd,
                string releaseDateStart,
                string releaseDateEnd,
                string collectionFrequency,
                string collectionDay,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "MandateStatus", mandateStatus },
                { "InitiationDateStart", initiationDateStart },
                { "InitiationDateEnd", initiationDateEnd },
                { "ReleaseDateStart", releaseDateStart },
                { "ReleaseDateEnd", releaseDateEnd },
                { "CollectionFrequency", collectionFrequency },
                { "CollectionDay", collectionDay },
                { "PageNumber", pageNumber },
                { "PageSize", pageSize }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateSNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateListReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="startDate">Required parameter: (Required) The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: (Required) The last date you would like to see collection dates for.</param>
        /// <param name="day">Required parameter: (Required) The numeric representation of the collection day.<b><small>Accepted values:</small></b><ul><li>(1 - 31) - When frequency is MNTH</li></ul><em><small>Represents the day of the month to collect.i.e. "1" for the 1st of the month or "31" for the 31st of the month.</small></em><br /><ul><li>(1 - 6) - When frequency is WEEK</li></ul><em><small>Represents the day of the week to collect.i.e. "1" for monday or "6" for saturday.</small></em><br /><ul><li>(1 - 6, 8 - 13) - When frequency is FRTN</li></ul><em><small>Represents the day of the week to collect.i.e. "1" for the 1st and 3rd monday or "8" for the 2nd and 4th monday.</small></em><br /><ul><li>(1 - 12, 14, 99) - When frequency is ADHO</li></ul><em><small>Represents the ad hoc day of the month to collect.i.e."1" for the last monday of the month"6" for the last saturday of the month"7" for the first monday of the month"12" for the first saturday of the month"14" for the second last day of the month"99" for the last day of the month.</small></em></param>
        /// <param name="frequency">Required parameter: (Required) The regularity of the desired collections.<b><small>Accepted values:</small></b><ul><li>WEEK - Weekly</li><li>FRTN - Fortnightly</li><li>MNTH - Monthly</li><li>QURT - Quarterly</li><li>YEAR - Yearly</li><li>ADHO - Ad hoc</li></ul></param>
        /// <param name="collectionRule">Required parameter: (Required) The collection rule to apply on non-processing days.  <b><small>Accepted values:</small></b><ul><li>FRWD - Fowards rule</li><li>BKWD - Backwards rule</li></ul></param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.CollectionDateSReturned response from the API call</return>
        public Models.CollectionDateSReturned GetAListOfCollectionDatesMatchingTheProvidedParameters(
                string startDate,
                string endDate,
                string day,
                string frequency,
                string collectionRule,
                double xApiVersion)
        {
            Task<Models.CollectionDateSReturned> t = GetAListOfCollectionDatesMatchingTheProvidedParametersAsync(startDate, endDate, day, frequency, collectionRule, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="startDate">Required parameter: (Required) The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: (Required) The last date you would like to see collection dates for.</param>
        /// <param name="day">Required parameter: (Required) The numeric representation of the collection day.<b><small>Accepted values:</small></b><ul><li>(1 - 31) - When frequency is MNTH</li></ul><em><small>Represents the day of the month to collect.i.e. "1" for the 1st of the month or "31" for the 31st of the month.</small></em><br /><ul><li>(1 - 6) - When frequency is WEEK</li></ul><em><small>Represents the day of the week to collect.i.e. "1" for monday or "6" for saturday.</small></em><br /><ul><li>(1 - 6, 8 - 13) - When frequency is FRTN</li></ul><em><small>Represents the day of the week to collect.i.e. "1" for the 1st and 3rd monday or "8" for the 2nd and 4th monday.</small></em><br /><ul><li>(1 - 12, 14, 99) - When frequency is ADHO</li></ul><em><small>Represents the ad hoc day of the month to collect.i.e."1" for the last monday of the month"6" for the last saturday of the month"7" for the first monday of the month"12" for the first saturday of the month"14" for the second last day of the month"99" for the last day of the month.</small></em></param>
        /// <param name="frequency">Required parameter: (Required) The regularity of the desired collections.<b><small>Accepted values:</small></b><ul><li>WEEK - Weekly</li><li>FRTN - Fortnightly</li><li>MNTH - Monthly</li><li>QURT - Quarterly</li><li>YEAR - Yearly</li><li>ADHO - Ad hoc</li></ul></param>
        /// <param name="collectionRule">Required parameter: (Required) The collection rule to apply on non-processing days.  <b><small>Accepted values:</small></b><ul><li>FRWD - Fowards rule</li><li>BKWD - Backwards rule</li></ul></param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.CollectionDateSReturned response from the API call</return>
        public async Task<Models.CollectionDateSReturned> GetAListOfCollectionDatesMatchingTheProvidedParametersAsync(
                string startDate,
                string endDate,
                string day,
                string frequency,
                string collectionRule,
                double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collectiondatelist");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "StartDate", startDate },
                { "EndDate", endDate },
                { "Day", day },
                { "Frequency", frequency },
                { "CollectionRule", collectionRule }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CollectionDateSReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="collectionIdentification">Required parameter: (Required) The parameters.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateCollectionReturned response from the API call</return>
        public Models.MandateCollectionReturned GetASingleMandateCollectionMatchingTheProvidedParameters(string collectionIdentification, double xApiVersion)
        {
            Task<Models.MandateCollectionReturned> t = GetASingleMandateCollectionMatchingTheProvidedParametersAsync(collectionIdentification, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="collectionIdentification">Required parameter: (Required) The parameters.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateCollectionReturned response from the API call</return>
        public async Task<Models.MandateCollectionReturned> GetASingleMandateCollectionMatchingTheProvidedParametersAsync(string collectionIdentification, double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collection/{collectionIdentification}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "collectionIdentification", collectionIdentification }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateCollectionNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateCollectionReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required) The unique mandate identifier assigned by the creditor.</param>
        /// <param name="startDate">Required parameter: The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: The last date you would like to see collection dates for.</param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateCollectionListReturned response from the API call</return>
        public Models.MandateCollectionListReturned GetAListOfMandateCollectionsMatchingTheProvidedParameters(
                string mandateIdentification,
                string startDate,
                string endDate,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            Task<Models.MandateCollectionListReturned> t = GetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(mandateIdentification, startDate, endDate, pageNumber, pageSize, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="mandateIdentification">Required parameter: (Required) The unique mandate identifier assigned by the creditor.</param>
        /// <param name="startDate">Required parameter: The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: The last date you would like to see collection dates for.</param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.MandateCollectionListReturned response from the API call</return>
        public async Task<Models.MandateCollectionListReturned> GetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(
                string mandateIdentification,
                string startDate,
                string endDate,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collectionlist");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "MandateIdentification", mandateIdentification },
                { "StartDate", startDate },
                { "EndDate", endDate },
                { "PageNumber", pageNumber },
                { "PageSize", pageSize }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new NoMandateCollectionsFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateCollectionListReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="startDate">Required parameter: The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: The last date you would like to see collection dates for.</param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateCollectionListReturned1 response from the API call</return>
        public Models.MandateCollectionListReturned1 CreateGetAListOfMandateCollectionsMatchingTheProvidedParameters(
                string startDate,
                string endDate,
                string pageNumber,
                string pageSize,
                double xApiVersion,
                string contentType,
                List<Models.GetAListOfMandateCollectionsMatchingTheProvidedParametersRequest> body)
        {
            Task<Models.MandateCollectionListReturned1> t = CreateGetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(startDate, endDate, pageNumber, pageSize, xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="startDate">Required parameter: The first date you would like to see collection dates for.</param>
        /// <param name="endDate">Required parameter: The last date you would like to see collection dates for.</param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateCollectionListReturned1 response from the API call</return>
        public async Task<Models.MandateCollectionListReturned1> CreateGetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(
                string startDate,
                string endDate,
                string pageNumber,
                string pageSize,
                double xApiVersion,
                string contentType,
                List<Models.GetAListOfMandateCollectionsMatchingTheProvidedParametersRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collectionIdentificationlist");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "StartDate", startDate },
                { "EndDate", endDate },
                { "PageNumber", pageNumber },
                { "PageSize", pageSize }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new NoMandateCollectionsFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateCollectionListReturned1>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="forDateStart">Required parameter: Example: </param>
        /// <param name="forDateEnd">Required parameter: Example: </param>
        /// <param name="actionDateStart">Required parameter: Example: </param>
        /// <param name="actionDateEnd">Required parameter: Example: </param>
        /// <param name="resultDateStart">Required parameter: Example: </param>
        /// <param name="resultDateEnd">Required parameter: Example: </param>
        /// <param name="submissionDateStart">Required parameter: Example: </param>
        /// <param name="submissionDateEnd">Required parameter: Example: </param>
        /// <param name="resultLastUpdatedOnStart">Required parameter: Example: </param>
        /// <param name="resultLastUpdatedOnEnd">Required parameter: Example: </param>
        /// <param name="instrument">Required parameter: Example: </param>
        /// <param name="clientSegment">Required parameter: Example: </param>
        /// <param name="includePending">Required parameter: Example: </param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.CollectionResultSReturned response from the API call</return>
        public Models.CollectionResultSReturned GetAListOfMandateCollectionResultsMatchingTheProvidedParameters(
                string forDateStart,
                string forDateEnd,
                string actionDateStart,
                string actionDateEnd,
                string resultDateStart,
                string resultDateEnd,
                string submissionDateStart,
                string submissionDateEnd,
                string resultLastUpdatedOnStart,
                string resultLastUpdatedOnEnd,
                string instrument,
                string clientSegment,
                string includePending,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            Task<Models.CollectionResultSReturned> t = GetAListOfMandateCollectionResultsMatchingTheProvidedParametersAsync(forDateStart, forDateEnd, actionDateStart, actionDateEnd, resultDateStart, resultDateEnd, submissionDateStart, submissionDateEnd, resultLastUpdatedOnStart, resultLastUpdatedOnEnd, instrument, clientSegment, includePending, pageNumber, pageSize, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="forDateStart">Required parameter: Example: </param>
        /// <param name="forDateEnd">Required parameter: Example: </param>
        /// <param name="actionDateStart">Required parameter: Example: </param>
        /// <param name="actionDateEnd">Required parameter: Example: </param>
        /// <param name="resultDateStart">Required parameter: Example: </param>
        /// <param name="resultDateEnd">Required parameter: Example: </param>
        /// <param name="submissionDateStart">Required parameter: Example: </param>
        /// <param name="submissionDateEnd">Required parameter: Example: </param>
        /// <param name="resultLastUpdatedOnStart">Required parameter: Example: </param>
        /// <param name="resultLastUpdatedOnEnd">Required parameter: Example: </param>
        /// <param name="instrument">Required parameter: Example: </param>
        /// <param name="clientSegment">Required parameter: Example: </param>
        /// <param name="includePending">Required parameter: Example: </param>
        /// <param name="pageNumber">Required parameter: Example: </param>
        /// <param name="pageSize">Required parameter: Example: </param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.CollectionResultSReturned response from the API call</return>
        public async Task<Models.CollectionResultSReturned> GetAListOfMandateCollectionResultsMatchingTheProvidedParametersAsync(
                string forDateStart,
                string forDateEnd,
                string actionDateStart,
                string actionDateEnd,
                string resultDateStart,
                string resultDateEnd,
                string submissionDateStart,
                string submissionDateEnd,
                string resultLastUpdatedOnStart,
                string resultLastUpdatedOnEnd,
                string instrument,
                string clientSegment,
                string includePending,
                string pageNumber,
                string pageSize,
                double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collectionresultlist");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "ForDateStart", forDateStart },
                { "ForDateEnd", forDateEnd },
                { "ActionDateStart", actionDateStart },
                { "ActionDateEnd", actionDateEnd },
                { "ResultDateStart", resultDateStart },
                { "ResultDateEnd", resultDateEnd },
                { "SubmissionDateStart", submissionDateStart },
                { "SubmissionDateEnd", submissionDateEnd },
                { "ResultLastUpdatedOnStart", resultLastUpdatedOnStart },
                { "ResultLastUpdatedOnEnd", resultLastUpdatedOnEnd },
                { "Instrument", instrument },
                { "ClientSegment", clientSegment },
                { "IncludePending", includePending },
                { "PageNumber", pageNumber },
                { "PageSize", pageSize }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CollectionResultSReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSRegistered response from the API call</return>
        public Models.MandateSRegistered CreateRegisterNewMandateS(double xApiVersion, string contentType, List<Models.RegisterNewMandateSRequest> body)
        {
            Task<Models.MandateSRegistered> t = CreateRegisterNewMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSRegistered response from the API call</return>
        public async Task<Models.MandateSRegistered> CreateRegisterNewMandateSAsync(double xApiVersion, string contentType, List<Models.RegisterNewMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/register");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSRegistered>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSAmended response from the API call</return>
        public Models.MandateSAmended UpdateAmendRegisteredMandateS(double xApiVersion, string contentType, List<Models.AmendRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSAmended> t = UpdateAmendRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSAmended response from the API call</return>
        public async Task<Models.MandateSAmended> UpdateAmendRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.AmendRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/amend");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSAmended>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSCancelled response from the API call</return>
        public Models.MandateSCancelled CreateCancelRegisteredMandateS(double xApiVersion, string contentType, List<Models.CancelRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSCancelled> t = CreateCancelRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSCancelled response from the API call</return>
        public async Task<Models.MandateSCancelled> CreateCancelRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.CancelRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/cancel");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSCancelled>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyPaused response from the API call</return>
        public Models.MandateSuccessfullyPaused UpdatePauseRegisteredMandateS(double xApiVersion, string contentType, List<Models.PauseRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSuccessfullyPaused> t = UpdatePauseRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyPaused response from the API call</return>
        public async Task<Models.MandateSuccessfullyPaused> UpdatePauseRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.PauseRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/pause");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSuccessfullyPaused>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyResumed response from the API call</return>
        public Models.MandateSuccessfullyResumed UpdateResumeRegisteredMandateS(double xApiVersion, string contentType, List<Models.ResumeRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSuccessfullyResumed> t = UpdateResumeRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyResumed response from the API call</return>
        public async Task<Models.MandateSuccessfullyResumed> UpdateResumeRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.ResumeRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/resume");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSuccessfullyResumed>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyLapsed response from the API call</return>
        public Models.MandateSuccessfullyLapsed UpdateLapseRegisteredMandateS(double xApiVersion, string contentType, List<Models.LapseRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSuccessfullyLapsed> t = UpdateLapseRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullyLapsed response from the API call</return>
        public async Task<Models.MandateSuccessfullyLapsed> UpdateLapseRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.LapseRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/lapse");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSuccessfullyLapsed>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullySuspended response from the API call</return>
        public Models.MandateSuccessfullySuspended UpdateSuspendRegisteredMandateS(double xApiVersion, string contentType, List<Models.SuspendRegisteredMandateSRequest> body)
        {
            Task<Models.MandateSuccessfullySuspended> t = UpdateSuspendRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.MandateSuccessfullySuspended response from the API call</return>
        public async Task<Models.MandateSuccessfullySuspended> UpdateSuspendRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.SuspendRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/suspend");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.MandateSuccessfullySuspended>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.AdditionalDataSuccessfullyAdded response from the API call</return>
        public Models.AdditionalDataSuccessfullyAdded AddAdditionalDataToRegisteredMandateS(double xApiVersion, string contentType, List<Models.AddAdditionalDataToRegisteredMandateSRequest> body)
        {
            Task<Models.AdditionalDataSuccessfullyAdded> t = AddAdditionalDataToRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.AdditionalDataSuccessfullyAdded response from the API call</return>
        public async Task<Models.AdditionalDataSuccessfullyAdded> AddAdditionalDataToRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.AddAdditionalDataToRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/add-additional-data");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.AdditionalDataSuccessfullyAdded>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.AdditionalDataSuccessfullyUpdated response from the API call</return>
        public Models.AdditionalDataSuccessfullyUpdated UpdateAdditionalDataOfRegisteredMandateS(double xApiVersion, string contentType, List<Models.UpdateAdditionalDataOfRegisteredMandateSRequest> body)
        {
            Task<Models.AdditionalDataSuccessfullyUpdated> t = UpdateAdditionalDataOfRegisteredMandateSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.AdditionalDataSuccessfullyUpdated response from the API call</return>
        public async Task<Models.AdditionalDataSuccessfullyUpdated> UpdateAdditionalDataOfRegisteredMandateSAsync(double xApiVersion, string contentType, List<Models.UpdateAdditionalDataOfRegisteredMandateSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/update-additional-data");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.AdditionalDataSuccessfullyUpdated>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSCreated response from the API call</return>
        public Models.CollectionSCreated CreateNewMandateCollectionS(double xApiVersion, string contentType, List<Models.CreateNewMandateCollectionSRequest> body)
        {
            Task<Models.CollectionSCreated> t = CreateNewMandateCollectionSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSCreated response from the API call</return>
        public async Task<Models.CollectionSCreated> CreateNewMandateCollectionSAsync(double xApiVersion, string contentType, List<Models.CreateNewMandateCollectionSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/collect");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CollectionSCreated>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSAmended response from the API call</return>
        public Models.CollectionSAmended UpdateAmendCreatedMandateCollectionS(double xApiVersion, string contentType, List<Models.AmendCreatedMandateCollectionSRequest> body)
        {
            Task<Models.CollectionSAmended> t = UpdateAmendCreatedMandateCollectionSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSAmended response from the API call</return>
        public async Task<Models.CollectionSAmended> UpdateAmendCreatedMandateCollectionSAsync(double xApiVersion, string contentType, List<Models.AmendCreatedMandateCollectionSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/amendcollection");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PutBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CollectionSAmended>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSRecalled response from the API call</return>
        public Models.CollectionSRecalled CreateRecallCreatedMandateCollectionS(double xApiVersion, string contentType, List<Models.RecallCreatedMandateCollectionSRequest> body)
        {
            Task<Models.CollectionSRecalled> t = CreateRecallCreatedMandateCollectionSAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.CollectionSRecalled response from the API call</return>
        public async Task<Models.CollectionSRecalled> CreateRecallCreatedMandateCollectionSAsync(double xApiVersion, string contentType, List<Models.RecallCreatedMandateCollectionSRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/recallcollection");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.CollectionSRecalled>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authReference">Required parameter: (Required) The authentication reference.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.DebicheckAuthenticationStatusReturned response from the API call</return>
        public Models.DebicheckAuthenticationStatusReturned GetTheDebiCheckAuthenticationStatusOfAMandate(string authReference, double xApiVersion)
        {
            Task<Models.DebicheckAuthenticationStatusReturned> t = GetTheDebiCheckAuthenticationStatusOfAMandateAsync(authReference, xApiVersion);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="authReference">Required parameter: (Required) The authentication reference.</param>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the Models.DebicheckAuthenticationStatusReturned response from the API call</return>
        public async Task<Models.DebicheckAuthenticationStatusReturned> GetTheDebiCheckAuthenticationStatusOfAMandateAsync(string authReference, double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckauthstatus/{authReference}");

            //process optional template parameters
            APIHelper.AppendUrlWithTemplateParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "authReference", authReference }
            });


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationStatusReturned>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationRequestProcessing response from the API call</return>
        public Models.DebicheckAuthenticationRequestProcessing CreateRequestDebiCheckAuthenticationOnARegisteredMandate(double xApiVersion, string contentType, Models.RequestDebiCheckAuthenticationOnARegisteredMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationRequestProcessing> t = CreateRequestDebiCheckAuthenticationOnARegisteredMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationRequestProcessing response from the API call</return>
        public async Task<Models.DebicheckAuthenticationRequestProcessing> CreateRequestDebiCheckAuthenticationOnARegisteredMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckAuthenticationOnARegisteredMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckauthregistered");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationRequestProcessing>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationAmendRequestProcessing response from the API call</return>
        public Models.DebicheckAuthenticationAmendRequestProcessing CreateRequestDebiCheckAmendmentOnARegisteredMandate(double xApiVersion, string contentType, Models.RequestDebiCheckAmendmentOnARegisteredMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationAmendRequestProcessing> t = CreateRequestDebiCheckAmendmentOnARegisteredMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationAmendRequestProcessing response from the API call</return>
        public async Task<Models.DebicheckAuthenticationAmendRequestProcessing> CreateRequestDebiCheckAmendmentOnARegisteredMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckAmendmentOnARegisteredMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckamendregistered");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationAmendRequestProcessing>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationCancelRequestProcessing response from the API call</return>
        public Models.DebicheckAuthenticationCancelRequestProcessing CreateRequestDebiCheckCancellationOnARegisteredMandate(double xApiVersion, string contentType, Models.RequestDebiCheckCancellationOnARegisteredMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationCancelRequestProcessing> t = CreateRequestDebiCheckCancellationOnARegisteredMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationCancelRequestProcessing response from the API call</return>
        public async Task<Models.DebicheckAuthenticationCancelRequestProcessing> CreateRequestDebiCheckCancellationOnARegisteredMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckCancellationOnARegisteredMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckcancelregistered");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationCancelRequestProcessing>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationRequestProcessing response from the API call</return>
        public Models.DebicheckAuthenticationRequestProcessing CreateRequestDebiCheckAuthenticationOnAMandate(double xApiVersion, string contentType, Models.RequestDebiCheckAuthenticationOnAMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationRequestProcessing> t = CreateRequestDebiCheckAuthenticationOnAMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationRequestProcessing response from the API call</return>
        public async Task<Models.DebicheckAuthenticationRequestProcessing> CreateRequestDebiCheckAuthenticationOnAMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckAuthenticationOnAMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckauth");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationRequestProcessing>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationAmendRequestProcessing response from the API call</return>
        public Models.DebicheckAuthenticationAmendRequestProcessing CreateRequestDebiCheckAmendmentOnAMandate(double xApiVersion, string contentType, Models.RequestDebiCheckAmendmentOnAMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationAmendRequestProcessing> t = CreateRequestDebiCheckAmendmentOnAMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationAmendRequestProcessing response from the API call</return>
        public async Task<Models.DebicheckAuthenticationAmendRequestProcessing> CreateRequestDebiCheckAmendmentOnAMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckAmendmentOnAMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckamend");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationAmendRequestProcessing>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationCancelRequested response from the API call</return>
        public Models.DebicheckAuthenticationCancelRequested CreateRequestDebiCheckCancellationOnAMandate(double xApiVersion, string contentType, Models.RequestDebiCheckCancellationOnAMandateRequest body)
        {
            Task<Models.DebicheckAuthenticationCancelRequested> t = CreateRequestDebiCheckCancellationOnAMandateAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.DebicheckAuthenticationCancelRequested response from the API call</return>
        public async Task<Models.DebicheckAuthenticationCancelRequested> CreateRequestDebiCheckCancellationOnAMandateAsync(double xApiVersion, string contentType, Models.RequestDebiCheckCancellationOnAMandateRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Mandate/debicheckcancel");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.DebicheckAuthenticationCancelRequested>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 