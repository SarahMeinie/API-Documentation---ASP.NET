/*
 * BankTechAPI.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Utilities;
using BankTechAPI.Standard.Http.Request;
using BankTechAPI.Standard.Http.Response;
using BankTechAPI.Standard.Http.Client;
using BankTechAPI.Standard.Exceptions;

namespace BankTechAPI.Standard.Controllers
{
    public partial class VerifyController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static VerifyController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static VerifyController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new VerifyController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateSouthAfricanIDNumberVerification(double xApiVersion, string contentType, Models.SouthAfricanIDNumberVerificationRequest body)
        {
            Task t = CreateSouthAfricanIDNumberVerificationAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateSouthAfricanIDNumberVerificationAsync(double xApiVersion, string contentType, Models.SouthAfricanIDNumberVerificationRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/profile-id-verification");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateRealTimeSouthAfricanHomeAffairsIDNumberVerification(double xApiVersion, string contentType, Models.RealTimeSouthAfricanHomeAffairsIDNumberVerificationRequest body)
        {
            Task t = CreateRealTimeSouthAfricanHomeAffairsIDNumberVerificationAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateRealTimeSouthAfricanHomeAffairsIDNumberVerificationAsync(double xApiVersion, string contentType, Models.RealTimeSouthAfricanHomeAffairsIDNumberVerificationRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/real-time-id-verification");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateFindTheIDNumberFromAContactNumber(double xApiVersion, string contentType, Models.FindTheIDNumberFromAContactNumberRequest body)
        {
            Task t = CreateFindTheIDNumberFromAContactNumberAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateFindTheIDNumberFromAContactNumberAsync(double xApiVersion, string contentType, Models.FindTheIDNumberFromAContactNumberRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/contact-to-id");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateCreditBureauDataWithoutIDVerification(double xApiVersion, string contentType, Models.CreditBureauDataWithoutIDVerificationRequest body)
        {
            Task t = CreateCreditBureauDataWithoutIDVerificationAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateCreditBureauDataWithoutIDVerificationAsync(double xApiVersion, string contentType, Models.CreditBureauDataWithoutIDVerificationRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/address-id");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateFintecAPISOwnUniqueAlgorithmToFICAYourClients(double xApiVersion, string contentType, Models.FintecAPISOwnUniqueAlgorithmToFICAYourClientsRequest body)
        {
            Task t = CreateFintecAPISOwnUniqueAlgorithmToFICAYourClientsAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateFintecAPISOwnUniqueAlgorithmToFICAYourClientsAsync(double xApiVersion, string contentType, Models.FintecAPISOwnUniqueAlgorithmToFICAYourClientsRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/kyc");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateBankAccountVerificationReport(double xApiVersion, string contentType, Models.BankAccountVerificationReportRequest body)
        {
            Task t = CreateBankAccountVerificationReportAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateBankAccountVerificationReportAsync(double xApiVersion, string contentType, Models.BankAccountVerificationReportRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/bank-account-verification");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateABSABankAccountVerificationReport(double xApiVersion, string contentType, Models.ABSABankAccountVerificationReportRequest body)
        {
            Task t = CreateABSABankAccountVerificationReportAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateABSABankAccountVerificationReportAsync(double xApiVersion, string contentType, Models.ABSABankAccountVerificationReportRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/absa-bank-account-verification");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.CDVResult> response from the API call</return>
        public List<Models.CDVResult> CreateCDVBankAccountVerification(double xApiVersion, string contentType, List<Models.CDVBankAccountVerificationRequest> body)
        {
            Task<List<Models.CDVResult>> t = CreateCDVBankAccountVerificationAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the List<Models.CDVResult> response from the API call</return>
        public async Task<List<Models.CDVResult>> CreateCDVBankAccountVerificationAsync(double xApiVersion, string contentType, List<Models.CDVBankAccountVerificationRequest> body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/cdv-account-verification");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 404)
                throw new MandateNotFoundException(@"Not Found", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<List<Models.CDVResult>>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateBankAccountVerificationJobStatus(double xApiVersion, string contentType, Models.BankAccountVerificationJobStatusRequest body)
        {
            Task t = CreateBankAccountVerificationJobStatusAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateBankAccountVerificationJobStatusAsync(double xApiVersion, string contentType, Models.BankAccountVerificationJobStatusRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/bank-account-verification-job-status");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the void response from the API call</return>
        public void GetPingMethodToTestTheStatusOfTheService(double xApiVersion)
        {
            Task t = GetPingMethodToTestTheStatusOfTheServiceAsync(xApiVersion);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetPingMethodToTestTheStatusOfTheServiceAsync(double xApiVersion)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/ping");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "x-api-version", xApiVersion.ToString() }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// CIPC - Uses the EnquiryID and EnquiryResultID from the company-match function to get the final file on the company.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ResponseSuccessfulCIPCMatchResultIsPositive response from the API call</return>
        public Models.ResponseSuccessfulCIPCMatchResultIsPositive CreateGetTheCompanyCIPCSearchResults(double xApiVersion, string contentType, Models.GetTheCompanyCIPCSearchResultsRequest body)
        {
            Task<Models.ResponseSuccessfulCIPCMatchResultIsPositive> t = CreateGetTheCompanyCIPCSearchResultsAsync(xApiVersion, contentType, body);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// CIPC - Uses the EnquiryID and EnquiryResultID from the company-match function to get the final file on the company.
        /// </summary>
        /// <param name="xApiVersion">Required parameter: The requested API version</param>
        /// <param name="contentType">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <return>Returns the Models.ResponseSuccessfulCIPCMatchResultIsPositive response from the API call</return>
        public async Task<Models.ResponseSuccessfulCIPCMatchResultIsPositive> CreateGetTheCompanyCIPCSearchResultsAsync(double xApiVersion, string contentType, Models.GetTheCompanyCIPCSearchResultsRequest body)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/Verify/cipc-company-compare");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "x-api-version", xApiVersion.ToString() },
                { "Content-Type", contentType }
            };
            _headers.Add("x-api-version", Configuration.XApiVersion);
            _headers.Add("x-api-key", Configuration.XApiKey);

            //append body params
            var _body = APIHelper.JsonSerialize(body);

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.PostBody(_queryUrl, _headers, _body);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 400)
                throw new BadRequestException(@"Bad Request", _context);

            if (_response.StatusCode == 401)
                throw new UnauthorizedRequestException(@"Unauthorized", _context);

            if (_response.StatusCode == 403)
                throw new ForbiddenRequestException(@"Forbidden", _context);

            if (_response.StatusCode == 500)
                throw new AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException(@"Internal Server Error", _context);

            if (_response.StatusCode == 503)
                throw new ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException(@"Service Unavailable", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.ResponseSuccessfulCIPCMatchResultIsPositive>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 