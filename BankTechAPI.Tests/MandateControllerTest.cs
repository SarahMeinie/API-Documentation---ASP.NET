/*
 * BankTechAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Utilities; 
using BankTechAPI.Standard.Http.Client;
using BankTechAPI.Standard.Http.Response;
using BankTechAPI.Tests.Helpers;
using NUnit.Framework;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Controllers;
using BankTechAPI.Standard.Exceptions;

namespace BankTechAPI.Tests
{
    [TestFixture]
    public class MandateControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static MandateController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Mandate;
        }

        /// <summary>
        /// TODO: Add description for test TestGetASummaryListOfRegisteredMandatesMatchingTheProvidedParameters 
        /// </summary>
        [Test]
        public async Task TestGetASummaryListOfRegisteredMandatesMatchingTheProvidedParameters() 
        {
            // Parameters for the API call
            string mandateStatus = "<string>";
            string initiationDateStart = "<dateTime>";
            string initiationDateEnd = "<dateTime>";
            string releaseDateStart = "<dateTime>";
            string releaseDateEnd = "<dateTime>";
            string collectionFrequency = "<string>";
            string collectionDay = "<string>";
            string pageNumber = "<integer>";
            string pageSize = "<integer>";
            double xApiVersion = 1.0;

            // Perform API call
            Standard.Models.MandateListReturned result = null;

            try
            {
                result = await controller.GetASummaryListOfRegisteredMandatesMatchingTheProvidedParametersAsync(mandateStatus, initiationDateStart, initiationDateEnd, releaseDateStart, releaseDateEnd, collectionFrequency, collectionDay, pageNumber, pageSize, xApiVersion);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"mandates\": [\r\n    {\r\n      \"mandateIdentification\": \"MandateID001\",\r\n      \"mandateStatus\": \"Created\",\r\n      \"clientContractReference\": \"ContractRef001\",\r\n      \"initiationDate\": \"2020-07-15\",\r\n      \"releaseDate\": \"2020-07-15\",\r\n      \"instalmentAmount\": 63890142.176740974,\r\n      \"collectionDay\": \"28\",\r\n      \"instalmentOccurrence\": \"RCUR\",\r\n      \"collectionFrequency\": \"MNTH\",\r\n      \"isDebiCheck\": false\r\n    },\r\n    {\r\n      \"mandateIdentification\": \"MandateID001\",\r\n      \"mandateStatus\": \"Created\",\r\n      \"clientContractReference\": \"ContractRef001\",\r\n      \"initiationDate\": \"2020-07-15\",\r\n      \"releaseDate\": \"2020-07-15\",\r\n      \"instalmentAmount\": -51052085.226927437,\r\n      \"collectionDay\": \"28\",\r\n      \"instalmentOccurrence\": \"RCUR\",\r\n      \"collectionFrequency\": \"MNTH\",\r\n      \"isDebiCheck\": true\r\n    }\r\n  ],\r\n  \"currentPage\": -48224783,\r\n  \"totalPages\": -25383416,\r\n  \"totalCount\": 1449327,\r\n  \"status\": -23348541,\r\n  \"title\": \"consequat sed veniam enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestGetASingleMandateCollectionMatchingTheProvidedParameters 
        /// </summary>
        [Test]
        public async Task TestGetASingleMandateCollectionMatchingTheProvidedParameters() 
        {
            // Parameters for the API call
            string collectionIdentification = "<string>";
            double xApiVersion = 1.0;

            // Perform API call
            Standard.Models.MandateCollectionReturned result = null;

            try
            {
                result = await controller.GetASingleMandateCollectionMatchingTheProvidedParametersAsync(collectionIdentification, xApiVersion);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"collection\": {\r\n    \"mandateIdentification\": \"MandateID001\",\r\n    \"collectionIdentifications\": \"do\",\r\n    \"contractReference\": \"ContractRef001\",\r\n    \"collectionReference\": \"CollectRef001\",\r\n    \"collectionCurrency\": \"ZAR\",\r\n    \"collectionAmount\": 64925358.152700871,\r\n    \"forDate\": \"2020-07-15\",\r\n    \"requestedActionDate\": \"2020-07-15\",\r\n    \"clientSegment\": \"Bad book\",\r\n    \"recall\": false,\r\n    \"collectionInstrument\": \"ad mollit dolor\",\r\n    \"trackingPeriod\": \"aut\",\r\n    \"submissionDate\": \"2020-07-15\",\r\n    \"actionDate\": \"2020-07-15\",\r\n    \"resultCode\": \"proident voluptate officia adipisicing\",\r\n    \"resultDate\": \"2020-07-15\",\r\n    \"disputed\": false,\r\n    \"disputeCode\": \"\",\r\n    \"disputeDate\": \"2020-07-15\"\r\n  },\r\n  \"status\": 82931570,\r\n  \"title\": \"irure aliquip in si\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestGetAListOfMandateCollectionsMatchingTheProvidedParameters 
        /// </summary>
        [Test]
        public async Task TestGetAListOfMandateCollectionsMatchingTheProvidedParameters() 
        {
            // Parameters for the API call
            string mandateIdentification = "<string>";
            string startDate = "<date>";
            string endDate = "<date>";
            string pageNumber = "<integer>";
            string pageSize = "<integer>";
            double xApiVersion = 1.0;

            // Perform API call
            Standard.Models.MandateCollectionListReturned result = null;

            try
            {
                result = await controller.GetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(mandateIdentification, startDate, endDate, pageNumber, pageSize, xApiVersion);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"collections\": [\r\n    {\r\n      \"mandateIdentification\": \"MandateID001\",\r\n      \"collectionIdentifications\": \"esse\",\r\n      \"contractReference\": \"ContractRef001\",\r\n      \"collectionReference\": \"CollectRef001\",\r\n      \"collectionCurrency\": \"ZAR\",\r\n      \"collectionAmount\": -71774966.758957252,\r\n      \"forDate\": \"2020-07-15\",\r\n      \"requestedActionDate\": \"2020-07-15\",\r\n      \"clientSegment\": \"Bad book\",\r\n      \"recall\": false,\r\n      \"collectionInstrument\": \"amet exercitation consectetur aliquip\",\r\n      \"trackingPeriod\": \"c\",\r\n      \"submissionDate\": \"2020-07-15\",\r\n      \"actionDate\": \"2020-07-15\",\r\n      \"resultCode\": \"ea nulla\",\r\n      \"resultDate\": \"2020-07-15\",\r\n      \"disputed\": false,\r\n      \"disputeCode\": \"\",\r\n      \"disputeDate\": \"2020-07-15\"\r\n    },\r\n    {\r\n      \"mandateIdentification\": \"MandateID001\",\r\n      \"collectionIdentifications\": \"laborum ad in deserunt\",\r\n      \"contractReference\": \"ContractRef001\",\r\n      \"collectionReference\": \"CollectRef001\",\r\n      \"collectionCurrency\": \"ZAR\",\r\n      \"collectionAmount\": -62001230.6081247,\r\n      \"forDate\": \"2020-07-15\",\r\n      \"requestedActionDate\": \"2020-07-15\",\r\n      \"clientSegment\": \"Bad book\",\r\n      \"recall\": false,\r\n      \"collectionInstrument\": \"velit voluptate\",\r\n      \"trackingPeriod\": \"p\",\r\n      \"submissionDate\": \"2020-07-15\",\r\n      \"actionDate\": \"2020-07-15\",\r\n      \"resultCode\": \"cupidatat ut\",\r\n      \"resultDate\": \"2020-07-15\",\r\n      \"disputed\": false,\r\n      \"disputeCode\": \"proi\",\r\n      \"disputeDate\": \"2020-07-15\"\r\n    }\r\n  ],\r\n  \"currentPage\": 75708179,\r\n  \"totalPages\": -3760573,\r\n  \"totalCount\": 64422656,\r\n  \"status\": 27223324,\r\n  \"title\": \"proident consectetur eiusmod culpa\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestGetAListOfMandateCollectionsMatchingTheProvidedParameters1 
        /// </summary>
        [Test]
        public async Task TestGetAListOfMandateCollectionsMatchingTheProvidedParameters1() 
        {
            // Parameters for the API call
            string startDate = "<date>";
            string endDate = "<date>";
            string pageNumber = "<integer>";
            string pageSize = "<integer>";
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.GetAListOfMandateCollectionsMatchingTheProvidedParametersRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.GetAListOfMandateCollectionsMatchingTheProvidedParametersRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateCollectionListReturned1 result = null;

            try
            {
                result = await controller.CreateGetAListOfMandateCollectionsMatchingTheProvidedParametersAsync(startDate, endDate, pageNumber, pageSize, xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"collections\": [\r\n    {\r\n      \"objectId\": -45129861,\r\n      \"mandateIdentification\": \"in sint veniam amet velit\",\r\n      \"identifications\": [\r\n        {\r\n          \"collectionIdentification\": \"dolor esse culpa\",\r\n          \"clientSegment\": \"non \",\r\n          \"requestedActionDate\": \"e\",\r\n          \"forDate\": \"Ut ipsum ad\"\r\n        },\r\n        {\r\n          \"collectionIdentification\": \"enim esse laboris\",\r\n          \"clientSegment\": \"Excepteur dolore non ullamco\",\r\n          \"requestedActionDate\": \"cupidatat Lorem nulla re\",\r\n          \"forDate\": \"cupidatat sunt voluptate enim\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"objectId\": -2925045,\r\n      \"mandateIdentification\": \"ullamco eu consectetur\",\r\n      \"identifications\": [\r\n        {\r\n          \"collectionIdentification\": \"Ut consectetur eu\",\r\n          \"clientSegment\": \"Lorem d\",\r\n          \"requestedActionDate\": \"anim ut magna\",\r\n          \"forDate\": \"sunt pariatur occaecat\"\r\n        },\r\n        {\r\n          \"collectionIdentification\": \"in nulla culpa nisi commodo\",\r\n          \"clientSegment\": \"cillum dolor laborum ea\",\r\n          \"requestedActionDate\": \"in sit\",\r\n          \"forDate\": \"id ex\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"currentPage\": 41327492,\r\n  \"totalPages\": 69616132,\r\n  \"totalCount\": -89586707,\r\n  \"status\": -44742132,\r\n  \"title\": \"occaecat consequat ullamco offi\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestGetAListOfMandateCollectionResultsMatchingTheProvidedParameters 
        /// </summary>
        [Test]
        public async Task TestGetAListOfMandateCollectionResultsMatchingTheProvidedParameters() 
        {
            // Parameters for the API call
            string forDateStart = "<dateTime>";
            string forDateEnd = "<dateTime>";
            string actionDateStart = "<dateTime>";
            string actionDateEnd = "<dateTime>";
            string resultDateStart = "<dateTime>";
            string resultDateEnd = "<dateTime>";
            string submissionDateStart = "<dateTime>";
            string submissionDateEnd = "<dateTime>";
            string resultLastUpdatedOnStart = "<dateTime>";
            string resultLastUpdatedOnEnd = "<dateTime>";
            string instrument = "<string>";
            string clientSegment = "<string>";
            string includePending = "<boolean>";
            string pageNumber = "<integer>";
            string pageSize = "<integer>";
            double xApiVersion = 1.0;

            // Perform API call
            Standard.Models.CollectionResultSReturned result = null;

            try
            {
                result = await controller.GetAListOfMandateCollectionResultsMatchingTheProvidedParametersAsync(forDateStart, forDateEnd, actionDateStart, actionDateEnd, resultDateStart, resultDateEnd, submissionDateStart, submissionDateEnd, resultLastUpdatedOnStart, resultLastUpdatedOnEnd, instrument, clientSegment, includePending, pageNumber, pageSize, xApiVersion);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"results\": [\r\n    {\r\n      \"collectionIdentification\": \"dolore dolor et\",\r\n      \"mandateIdentification\": \"ad magna \",\r\n      \"clientContractReference\": \"proident veniam\",\r\n      \"debitAmount\": 83615847.111425042,\r\n      \"forDate\": \"ea aute et sunt\",\r\n      \"actionDate\": \"d\",\r\n      \"submissionDate\": \"pariatur minim ut mollit\",\r\n      \"resultCode\": \"qui Duis ipsum\",\r\n      \"resultDate\": \"et proident culpa dolor\",\r\n      \"disputed\": true,\r\n      \"disputeCode\": \"eu voluptate laborum tempo\",\r\n      \"disputeDate\": \"am\",\r\n      \"clientSegment\": \"est\",\r\n      \"instrument\": \"ullamco\",\r\n      \"creditorAccountNumber\": \"quis aliqua\",\r\n      \"resultLastUpdatedOn\": \"dolore\"\r\n    },\r\n    {\r\n      \"collectionIdentification\": \"nulla\",\r\n      \"mandateIdentification\": \"e\",\r\n      \"clientContractReference\": \"magna in\",\r\n      \"debitAmount\": -43097113.649303108,\r\n      \"forDate\": \"esse\",\r\n      \"actionDate\": \"deserunt veniam dolore\",\r\n      \"submissionDate\": \"\",\r\n      \"resultCode\": \"quis labori\",\r\n      \"resultDate\": \"do fugiat occaecat est\",\r\n      \"disputed\": false,\r\n      \"disputeCode\": \"lab\",\r\n      \"disputeDate\": \"sed et\",\r\n      \"clientSegment\": \"dolor ad\",\r\n      \"instrument\": \"Lorem exercitation velit\",\r\n      \"creditorAccountNumber\": \"cillum\",\r\n      \"resultLastUpdatedOn\": \"amet aliqua nulla officia\"\r\n    }\r\n  ],\r\n  \"currentPage\": -17254011,\r\n  \"totalPages\": 20788979,\r\n  \"totalCount\": -61838174,\r\n  \"status\": -55386061,\r\n  \"title\": \"ex cupidatat do sed\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRegisterNewMandateS 
        /// </summary>
        [Test]
        public async Task TestRegisterNewMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.RegisterNewMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.RegisterNewMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"collectionDay\": \"<string>\",
    \"collectionType\": \"<string>\",
    \"currency\": \"<string>\",
    \"dateAdjustmentAllowed\": \"<boolean>\",
    \"debitValueType\": \"<string>\",
    \"entryClass\": \"<string>\",
    \"initiationDate\": \"<date>\",
    \"instalmentAmount\": \"<double>\",
    \"instalmentOccurrence\": \"<string>\",
    \"trackingAllowed\": \"<boolean>\",
    \"useAmountAdjustment\": \"<boolean>\",
    \"useRateAdjustment\": \"<boolean>\",
    \"debtor\": {
      \"name\": \"occa\",
      \"accountNumber\": \"\",
      \"accountType\": \"e\",
      \"branchCode\": \"non\",
      \"email\": \"c\",
      \"phoneNumber\": \"de\",
      \"identification\": \"dol\",
      \"identificationType\": \"\"
    },
    \"creditor\": {
      \"accountNumber\": \"eni\",
      \"accountName\": \"lab\",
      \"branchCode\": \"\",
      \"email\": \"lab\",
      \"phoneNumber\": \"con\",
      \"schemeName\": \"cons\",
      \"shortName\": \"m\",
      \"ultimateName\": \"fugi\"
    },
    \"adjustmentAmount\": \"<double>\",
    \"adjustmentCategory\": \"<string>\",
    \"adjustmentRate\": \"<double>\",
    \"authenticationCode\": \"<string>\",
    \"authenticationDate\": \"<date>\",
    \"authenticationInstrument\": \"<string>\",
    \"authenticationType\": \"<string>\",
    \"clientContractReference\": \"<string>\",
    \"clientRequestReference\": \"<string>\",
    \"collectionFrequency\": \"<string>\",
    \"firstCollectionIdentifier\": \"<string>\",
    \"firstCollectionDate\": \"<date>\",
    \"firstCollectionAmount\": \"<double>\",
    \"firstCollectionCurrency\": \"<string>\",
    \"debiCheckAuthKey\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"trackingDays\": \"<integer>\",
    \"releaseDate\": \"<date>\",
    \"maxCollectionCurrency\": \"<string>\",
    \"idVerificationStatus\": \"<string>\",
    \"bankAccountVerificationStatus\": \"<string>\",
    \"maxCollectionAmount\": \"<double>\",
    \"optiCollectMandate\": {
      \"contract\": {
        \"contractNo\": \"eius\",
        \"contractStatus\": \"e\",
        \"statusDate\": \"enim nulla culpa ut ullamco\",
        \"contractStartDate\": \"ullamco adipisicing\",
        \"contractEndDate\": \"fugiat esse aliqua Ut\",
        \"salesTeam\": \"Dui\",
        \"salesPerson\": \"e\",
        \"customer\": {
          \"title\": \"\",
          \"firstName\": \"e\",
          \"surname\": \"\",
          \"nationality\": \"null\",
          \"identification\": \"si\",
          \"gender\": \"ad\",
          \"birthDate\": \"ad\",
          \"language\": \"la\",
          \"country\": \"i\",
          \"city\": \"no\",
          \"town\": \"d\",
          \"suburb\": \"s\",
          \"postalCode\": \"et \",
          \"mobile\": \"dolo\",
          \"workTel\": \"r\",
          \"payday\": \"ani\",
          \"incomeFrequency\": \"des\",
          \"netSalary\": 31880210.751289979,
          \"province\": \"\",
          \"riskMapping\": \"ut \",
          \"employerName\": \"ve\",
          \"jobTitle\": \"u\",
          \"employmentType\": \"sint\"
        },
        \"product\": {
          \"productCode\": \"d\",
          \"productDescription\": \"ad\",
          \"businessLine\": \"sit\"
        }
      }
    }
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"collectionDay\": \"<string>\",
    \"collectionType\": \"<string>\",
    \"currency\": \"<string>\",
    \"dateAdjustmentAllowed\": \"<boolean>\",
    \"debitValueType\": \"<string>\",
    \"entryClass\": \"<string>\",
    \"initiationDate\": \"<date>\",
    \"instalmentAmount\": \"<double>\",
    \"instalmentOccurrence\": \"<string>\",
    \"trackingAllowed\": \"<boolean>\",
    \"useAmountAdjustment\": \"<boolean>\",
    \"useRateAdjustment\": \"<boolean>\",
    \"debtor\": {
      \"name\": \"dese\",
      \"accountNumber\": \"a\",
      \"accountType\": \"d\",
      \"branchCode\": \"\",
      \"email\": \"Ut e\",
      \"phoneNumber\": \"ad\",
      \"identification\": \"ad \",
      \"identificationType\": \"a\"
    },
    \"creditor\": {
      \"accountNumber\": \"ve\",
      \"accountName\": \"\",
      \"branchCode\": \"fug\",
      \"email\": \"mi\",
      \"phoneNumber\": \"in\",
      \"schemeName\": \"labo\",
      \"shortName\": \"elit\",
      \"ultimateName\": \"iru\"
    },
    \"adjustmentAmount\": \"<double>\",
    \"adjustmentCategory\": \"<string>\",
    \"adjustmentRate\": \"<double>\",
    \"authenticationCode\": \"<string>\",
    \"authenticationDate\": \"<date>\",
    \"authenticationInstrument\": \"<string>\",
    \"authenticationType\": \"<string>\",
    \"clientContractReference\": \"<string>\",
    \"clientRequestReference\": \"<string>\",
    \"collectionFrequency\": \"<string>\",
    \"firstCollectionIdentifier\": \"<string>\",
    \"firstCollectionDate\": \"<date>\",
    \"firstCollectionAmount\": \"<double>\",
    \"firstCollectionCurrency\": \"<string>\",
    \"debiCheckAuthKey\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"trackingDays\": \"<integer>\",
    \"releaseDate\": \"<date>\",
    \"maxCollectionCurrency\": \"<string>\",
    \"idVerificationStatus\": \"<string>\",
    \"bankAccountVerificationStatus\": \"<string>\",
    \"maxCollectionAmount\": \"<double>\",
    \"optiCollectMandate\": {
      \"contract\": {
        \"contractNo\": \"l\",
        \"contractStatus\": \"u\",
        \"statusDate\": \"velit\",
        \"contractStartDate\": \"sunt nostrud occaecat ipsum\",
        \"contractEndDate\": \"consectetur commodo\",
        \"salesTeam\": \"eni\",
        \"salesPerson\": \"e\",
        \"customer\": {
          \"title\": \"v\",
          \"firstName\": \"sin\",
          \"surname\": \"mini\",
          \"nationality\": \"oc\",
          \"identification\": \"\",
          \"gender\": \"co\",
          \"birthDate\": \"et quis est\",
          \"language\": \"\",
          \"country\": \"vol\",
          \"city\": \"cu\",
          \"town\": \"r\",
          \"suburb\": \"moll\",
          \"postalCode\": \"dolo\",
          \"mobile\": \"a\",
          \"workTel\": \"eni\",
          \"payday\": \"\",
          \"incomeFrequency\": \"oc\",
          \"netSalary\": -32621753.51843828,
          \"province\": \"pa\",
          \"riskMapping\": \"dolo\",
          \"employerName\": \"\",
          \"jobTitle\": \"Lo\",
          \"employmentType\": \"la\"
        },
        \"product\": {
          \"productCode\": \"\",
          \"productDescription\": \"D\",
          \"businessLine\": \"nu\"
        }
      }
    }
  }
]");

            // Perform API call
            Standard.Models.MandateSRegistered result = null;

            try
            {
                result = await controller.CreateRegisterNewMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"results\": [\r\n    {\r\n      \"objectId\": 31456539,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    },\r\n    {\r\n      \"objectId\": -8554444,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    }\r\n  ],\r\n  \"status\": 25959006,\r\n  \"title\": \"esse laborum est\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestAmendRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestAmendRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.AmendRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.AmendRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"amendmentReasonCode\": \"<string>\",
    \"adjustmentAmount\": \"<double>\",
    \"adjustmentCategory\": \"<string>\",
    \"adjustmentRate\": \"<double>\",
    \"authenticationCode\": \"<string>\",
    \"authenticationDate\": \"<date>\",
    \"authenticationInstrument\": \"<string>\",
    \"authenticationType\": \"<string>\",
    \"clientContractReference\": \"<string>\",
    \"clientRequestReference\": \"<string>\",
    \"collectionFrequency\": \"<string>\",
    \"collectionDay\": \"<string>\",
    \"collectionType\": \"<string>\",
    \"currency\": \"<string>\",
    \"dateAdjustmentAllowed\": \"<boolean>\",
    \"debitValueType\": \"<string>\",
    \"entryClass\": \"<string>\",
    \"firstCollectionIdentifier\": \"<string>\",
    \"firstCollectionDate\": \"<date>\",
    \"firstCollectionAmount\": \"<double>\",
    \"firstCollectionCurrency\": \"<string>\",
    \"initiationDate\": \"<date>\",
    \"instalmentAmount\": \"<double>\",
    \"instalmentOccurrence\": \"<string>\",
    \"debiCheckAuthKey\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"trackingAllowed\": \"<boolean>\",
    \"trackingDays\": \"<integer>\",
    \"useAmountAdjustment\": \"<boolean>\",
    \"useRateAdjustment\": \"<boolean>\",
    \"releaseDate\": \"<date>\",
    \"maxCollectionCurrency\": \"<string>\",
    \"idVerificationStatus\": \"<string>\",
    \"bankAccountVerificationStatus\": \"<string>\",
    \"maxCollectionAmount\": \"<double>\",
    \"debtor\": {
      \"name\": \"Lore\",
      \"accountNumber\": \"ve\",
      \"accountType\": \"d\",
      \"branchCode\": \"co\",
      \"email\": \"dolo\",
      \"phoneNumber\": \"\",
      \"identification\": \"min\",
      \"identificationType\": \"r\"
    },
    \"creditor\": {
      \"accountNumber\": \"\",
      \"accountName\": \"no\",
      \"branchCode\": \"sit\",
      \"email\": \"ad\",
      \"phoneNumber\": \"\",
      \"schemeName\": \"m\",
      \"shortName\": \"eu\",
      \"ultimateName\": \"la\"
    },
    \"optiCollectMandate\": {
      \"contract\": {
        \"contractNo\": \"Exc\",
        \"contractStatus\": \"of\",
        \"statusDate\": \"commodo Excepteur\",
        \"contractStartDate\": \"elit ut dolor sint\",
        \"contractEndDate\": \"et velit\",
        \"salesTeam\": \"de\",
        \"salesPerson\": \"U\",
        \"customer\": {
          \"title\": \"do\",
          \"firstName\": \"la\",
          \"surname\": \"\",
          \"nationality\": \"non\",
          \"identification\": \"co\",
          \"gender\": \"\",
          \"birthDate\": \"in laborum\",
          \"language\": \"sit\",
          \"country\": \"an\",
          \"city\": \"an\",
          \"town\": \"aut\",
          \"suburb\": \"anim\",
          \"postalCode\": \"do c\",
          \"mobile\": \"\",
          \"workTel\": \"inc\",
          \"payday\": \"dol\",
          \"incomeFrequency\": \"ve\",
          \"netSalary\": -34013197.13398996,
          \"province\": \"aliq\",
          \"riskMapping\": \"et\",
          \"employerName\": \"eni\",
          \"jobTitle\": \"ulla\",
          \"employmentType\": \"m\"
        },
        \"product\": {
          \"productCode\": \"la\",
          \"productDescription\": \"m\",
          \"businessLine\": \"id\"
        }
      }
    }
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"amendmentReasonCode\": \"<string>\",
    \"adjustmentAmount\": \"<double>\",
    \"adjustmentCategory\": \"<string>\",
    \"adjustmentRate\": \"<double>\",
    \"authenticationCode\": \"<string>\",
    \"authenticationDate\": \"<date>\",
    \"authenticationInstrument\": \"<string>\",
    \"authenticationType\": \"<string>\",
    \"clientContractReference\": \"<string>\",
    \"clientRequestReference\": \"<string>\",
    \"collectionFrequency\": \"<string>\",
    \"collectionDay\": \"<string>\",
    \"collectionType\": \"<string>\",
    \"currency\": \"<string>\",
    \"dateAdjustmentAllowed\": \"<boolean>\",
    \"debitValueType\": \"<string>\",
    \"entryClass\": \"<string>\",
    \"firstCollectionIdentifier\": \"<string>\",
    \"firstCollectionDate\": \"<date>\",
    \"firstCollectionAmount\": \"<double>\",
    \"firstCollectionCurrency\": \"<string>\",
    \"initiationDate\": \"<date>\",
    \"instalmentAmount\": \"<double>\",
    \"instalmentOccurrence\": \"<string>\",
    \"debiCheckAuthKey\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"trackingAllowed\": \"<boolean>\",
    \"trackingDays\": \"<integer>\",
    \"useAmountAdjustment\": \"<boolean>\",
    \"useRateAdjustment\": \"<boolean>\",
    \"releaseDate\": \"<date>\",
    \"maxCollectionCurrency\": \"<string>\",
    \"idVerificationStatus\": \"<string>\",
    \"bankAccountVerificationStatus\": \"<string>\",
    \"maxCollectionAmount\": \"<double>\",
    \"debtor\": {
      \"name\": \"dolo\",
      \"accountNumber\": \"\",
      \"accountType\": \"t\",
      \"branchCode\": \"co\",
      \"email\": \"ip\",
      \"phoneNumber\": \"e\",
      \"identification\": \"al\",
      \"identificationType\": \"ex\"
    },
    \"creditor\": {
      \"accountNumber\": \"ei\",
      \"accountName\": \"si\",
      \"branchCode\": \"r\",
      \"email\": \"c\",
      \"phoneNumber\": \"vo\",
      \"schemeName\": \"Dui\",
      \"shortName\": \"sit \",
      \"ultimateName\": \"mi\"
    },
    \"optiCollectMandate\": {
      \"contract\": {
        \"contractNo\": \"in\",
        \"contractStatus\": \"do\",
        \"statusDate\": \"reprehenderit pariatur\",
        \"contractStartDate\": \"et esse occaec\",
        \"contractEndDate\": \"dolor incididunt irure Excepteur\",
        \"salesTeam\": \"\",
        \"salesPerson\": \"e\",
        \"customer\": {
          \"title\": \"es\",
          \"firstName\": \"\",
          \"surname\": \"d\",
          \"nationality\": \"eiu\",
          \"identification\": \"m\",
          \"gender\": \"lab\",
          \"birthDate\": \"aliquip incididunt in cupidatat\",
          \"language\": \"ipsu\",
          \"country\": \"Ut d\",
          \"city\": \"al\",
          \"town\": \"l\",
          \"suburb\": \"o\",
          \"postalCode\": \"ip\",
          \"mobile\": \"ull\",
          \"workTel\": \"d\",
          \"payday\": \"Lore\",
          \"incomeFrequency\": \"a\",
          \"netSalary\": 37918281.510315448,
          \"province\": \"esse\",
          \"riskMapping\": \"el\",
          \"employerName\": \"al\",
          \"jobTitle\": \"\",
          \"employmentType\": \"Lor\"
        },
        \"product\": {
          \"productCode\": \"Exce\",
          \"productDescription\": \"pari\",
          \"businessLine\": \"oc\"
        }
      }
    }
  }
]");

            // Perform API call
            Standard.Models.MandateSAmended result = null;

            try
            {
                result = await controller.UpdateAmendRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"results\": [\r\n    {\r\n      \"objectId\": 31456539,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    },\r\n    {\r\n      \"objectId\": -8554444,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    }\r\n  ],\r\n  \"status\": 25959006,\r\n  \"title\": \"esse laborum est\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestCancelRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestCancelRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.CancelRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.CancelRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"cancellationReasonCode\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"cancellationReasonCode\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateSCancelled result = null;

            try
            {
                result = await controller.CreateCancelRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"results\": [\r\n    {\r\n      \"objectId\": 31456539,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    },\r\n    {\r\n      \"objectId\": -8554444,\r\n      \"mandateIdentification\": \"MandateID001\"\r\n    }\r\n  ],\r\n  \"status\": 25959006,\r\n  \"title\": \"esse laborum est\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestPauseRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestPauseRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.PauseRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.PauseRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateSuccessfullyPaused result = null;

            try
            {
                result = await controller.UpdatePauseRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestResumeRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestResumeRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.ResumeRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.ResumeRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateSuccessfullyResumed result = null;

            try
            {
                result = await controller.UpdateResumeRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestLapseRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestLapseRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.LapseRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.LapseRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateSuccessfullyLapsed result = null;

            try
            {
                result = await controller.UpdateLapseRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestSuspendRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestSuspendRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.SuspendRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.SuspendRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.MandateSuccessfullySuspended result = null;

            try
            {
                result = await controller.UpdateSuspendRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestAddAdditionalDataToRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestAddAdditionalDataToRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.AddAdditionalDataToRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.AddAdditionalDataToRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"additionalData\": [
      {
        \"fieldName\": \"anim Lorem\",
        \"value\": \"aute\",
        \"dataType\": \"Bool\"
      },
      {
        \"fieldName\": \"sint dolore minim tempor\",
        \"value\": \"officia veniam ea\",
        \"dataType\": \"Number\"
      }
    ]
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"additionalData\": [
      {
        \"fieldName\": \"anim amet nulla\",
        \"value\": \"Lorem irure\",
        \"dataType\": \"Text\"
      },
      {
        \"fieldName\": \"ullamco eiusmod\",
        \"value\": \"cupidatat Excepteur\",
        \"dataType\": \"Text\"
      }
    ]
  }
]");

            // Perform API call
            Standard.Models.AdditionalDataSuccessfullyAdded result = null;

            try
            {
                result = await controller.AddAdditionalDataToRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestUpdateAdditionalDataOfRegisteredMandateS 
        /// </summary>
        [Test]
        public async Task TestUpdateAdditionalDataOfRegisteredMandateS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.UpdateAdditionalDataOfRegisteredMandateSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.UpdateAdditionalDataOfRegisteredMandateSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"additionalData\": [
      {
        \"fieldName\": \"ut minim\",
        \"value\": \"eiusmod est Lorem\",
        \"dataType\": \"Text\"
      },
      {
        \"fieldName\": \"voluptate dolore ullamco qui\",
        \"value\": \"elit consequat nostrud\",
        \"dataType\": \"Text\"
      }
    ]
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"additionalData\": [
      {
        \"fieldName\": \"fugiat sunt\",
        \"value\": \"laborum occaecat labore voluptate in\",
        \"dataType\": \"Text\"
      },
      {
        \"fieldName\": \"commodo et amet voluptate\",
        \"value\": \"esse consectetur qui enim\",
        \"dataType\": \"Date\"
      }
    ]
  }
]");

            // Perform API call
            Standard.Models.AdditionalDataSuccessfullyUpdated result = null;

            try
            {
                result = await controller.UpdateAdditionalDataOfRegisteredMandateSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestCreateNewMandateCollectionS 
        /// </summary>
        [Test]
        public async Task TestCreateNewMandateCollectionS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.CreateNewMandateCollectionSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.CreateNewMandateCollectionSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"collectionReference\": \"<string>\",
    \"forDate\": \"<date>\",
    \"requestedActionDate\": \"<date>\",
    \"amount\": \"<double>\",
    \"clientSegment\": \"<string>\",
    \"currency\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"mandateIdentification\": \"<string>\",
    \"collectionReference\": \"<string>\",
    \"forDate\": \"<date>\",
    \"requestedActionDate\": \"<date>\",
    \"amount\": \"<double>\",
    \"clientSegment\": \"<string>\",
    \"currency\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.CollectionSCreated result = null;

            try
            {
                result = await controller.CreateNewMandateCollectionSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"responses\": [\r\n    {\r\n      \"objectId\": -39882042,\r\n      \"collectionIdentification\": \"ipsum adipisicing sunt enim\"\r\n    },\r\n    {\r\n      \"objectId\": -69435975,\r\n      \"collectionIdentification\": \"labore et id incididunt\"\r\n    }\r\n  ],\r\n  \"status\": 24773847,\r\n  \"title\": \"magna officia in\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestAmendCreatedMandateCollectionS 
        /// </summary>
        [Test]
        public async Task TestAmendCreatedMandateCollectionS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.AmendCreatedMandateCollectionSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.AmendCreatedMandateCollectionSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"collectionIdentification\": \"<string>\",
    \"preferredCreditorAccount\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"currency\": \"<string>\",
    \"collectionReference\": \"<string>\",
    \"requestedActionDate\": \"<date>\",
    \"amount\": \"<double>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"collectionIdentification\": \"<string>\",
    \"preferredCreditorAccount\": \"<string>\",
    \"clientSegment\": \"<string>\",
    \"currency\": \"<string>\",
    \"collectionReference\": \"<string>\",
    \"requestedActionDate\": \"<date>\",
    \"amount\": \"<double>\"
  }
]");

            // Perform API call
            Standard.Models.CollectionSAmended result = null;

            try
            {
                result = await controller.UpdateAmendCreatedMandateCollectionSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"responses\": [\r\n    {\r\n      \"objectId\": 62158793,\r\n      \"collectionIdentification\": \"Lorem veniam dolor sit\"\r\n    },\r\n    {\r\n      \"objectId\": -52386256,\r\n      \"collectionIdentification\": \"eiusmod quis dolor do\"\r\n    }\r\n  ],\r\n  \"status\": -45376436,\r\n  \"title\": \"exercitation in consequat aliquip magna\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRecallCreatedMandateCollectionS 
        /// </summary>
        [Test]
        public async Task TestRecallCreatedMandateCollectionS() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.RecallCreatedMandateCollectionSRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.RecallCreatedMandateCollectionSRequest>>("[
  {
    \"objectId\": \"<integer>\",
    \"collectionIdentification\": \"<string>\"
  },
  {
    \"objectId\": \"<integer>\",
    \"collectionIdentification\": \"<string>\"
  }
]");

            // Perform API call
            Standard.Models.CollectionSRecalled result = null;

            try
            {
                result = await controller.CreateRecallCreatedMandateCollectionSAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"responses\": [\r\n    {\r\n      \"objectId\": 62158793,\r\n      \"collectionIdentification\": \"Lorem veniam dolor sit\"\r\n    },\r\n    {\r\n      \"objectId\": -52386256,\r\n      \"collectionIdentification\": \"eiusmod quis dolor do\"\r\n    }\r\n  ],\r\n  \"status\": -45376436,\r\n  \"title\": \"exercitation in consequat aliquip magna\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestGetTheDebiCheckAuthenticationStatusOfAMandate 
        /// </summary>
        [Test]
        public async Task TestGetTheDebiCheckAuthenticationStatusOfAMandate() 
        {
            // Parameters for the API call
            string authReference = "<string>";
            double xApiVersion = 1.0;

            // Perform API call
            Standard.Models.DebicheckAuthenticationStatusReturned result = null;

            try
            {
                result = await controller.GetTheDebiCheckAuthenticationStatusOfAMandateAsync(authReference, xApiVersion);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"result\": {\r\n    \"authenticationStatus\": \"occaecat dolore Duis\",\r\n    \"authenticationDate\": \"veniam nisi sint \",\r\n    \"debiCheckAuthKey\": \"sunt cupidatat fugiat\",\r\n    \"rejectReasons\": [\r\n      \"Lorem pariatur ut ullamco\",\r\n      \"dolore incididunt dolore ex eu\"\r\n    ]\r\n  },\r\n  \"status\": 32823090,\r\n  \"title\": \"est ut ullamco\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckAuthenticationOnARegisteredMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckAuthenticationOnARegisteredMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckAuthenticationOnARegisteredMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckAuthenticationOnARegisteredMandateRequest>("{
  \"mandateIdentification\": \"<string>\",
  \"bank\": \"<string>\",
  \"authenticationInstrument\": \"<string>\"
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationRequestProcessing result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckAuthenticationOnARegisteredMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckAmendmentOnARegisteredMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckAmendmentOnARegisteredMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckAmendmentOnARegisteredMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckAmendmentOnARegisteredMandateRequest>("{
  \"mandateIdentification\": \"<string>\",
  \"bank\": \"<string>\",
  \"authenticationInstrument\": \"<string>\",
  \"amendmentReasonCode\": \"<string>\"
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationAmendRequestProcessing result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckAmendmentOnARegisteredMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckCancellationOnARegisteredMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckCancellationOnARegisteredMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckCancellationOnARegisteredMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckCancellationOnARegisteredMandateRequest>("{
  \"mandateIdentification\": \"<string>\",
  \"bank\": \"<string>\",
  \"cancellationReasonCode\": \"<string>\"
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationCancelRequestProcessing result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckCancellationOnARegisteredMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckAuthenticationOnAMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckAuthenticationOnAMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckAuthenticationOnAMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckAuthenticationOnAMandateRequest>("{
  \"bank\": \"<string>\",
  \"maxCollectionCurrency\": \"<string>\",
  \"maxCollectionAmount\": \"<double>\",
  \"mandateIdentification\": \"<string>\",
  \"adjustmentAmount\": \"<double>\",
  \"adjustmentCategory\": \"<string>\",
  \"adjustmentRate\": \"<double>\",
  \"authenticationCode\": \"<string>\",
  \"authenticationDate\": \"<date>\",
  \"authenticationInstrument\": \"<string>\",
  \"authenticationType\": \"<string>\",
  \"clientContractReference\": \"<string>\",
  \"clientRequestReference\": \"<string>\",
  \"collectionFrequency\": \"<string>\",
  \"collectionDay\": \"<string>\",
  \"collectionType\": \"<string>\",
  \"currency\": \"<string>\",
  \"dateAdjustmentAllowed\": \"<boolean>\",
  \"debitValueType\": \"<string>\",
  \"entryClass\": \"<string>\",
  \"firstCollectionIdentifier\": \"<string>\",
  \"firstCollectionDate\": \"<date>\",
  \"firstCollectionAmount\": \"<double>\",
  \"firstCollectionCurrency\": \"<string>\",
  \"initiationDate\": \"<date>\",
  \"instalmentAmount\": \"<double>\",
  \"instalmentOccurrence\": \"<string>\",
  \"debiCheckAuthKey\": \"<string>\",
  \"clientSegment\": \"<string>\",
  \"trackingAllowed\": \"<boolean>\",
  \"trackingDays\": \"<integer>\",
  \"useAmountAdjustment\": \"<boolean>\",
  \"useRateAdjustment\": \"<boolean>\",
  \"releaseDate\": \"<date>\",
  \"debtor\": {
    \"name\": \"veni\",
    \"accountNumber\": \"Lo\",
    \"accountType\": \"e\",
    \"branchCode\": \"ma\",
    \"email\": \"\",
    \"phoneNumber\": \"elit\",
    \"identification\": \"cul\",
    \"identificationType\": \"in \"
  },
  \"creditor\": {
    \"accountNumber\": \"no\",
    \"accountName\": \"\",
    \"branchCode\": \"cu\",
    \"email\": \"ex\",
    \"phoneNumber\": \"pro\",
    \"schemeName\": \"\",
    \"shortName\": \"se\",
    \"ultimateName\": \"ve\"
  }
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationRequestProcessing result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckAuthenticationOnAMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckAmendmentOnAMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckAmendmentOnAMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckAmendmentOnAMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckAmendmentOnAMandateRequest>("{
  \"bank\": \"<string>\",
  \"amendmentReasonCode\": \"<string>\",
  \"debiCheckAuthKey\": \"<string>\",
  \"maxCollectionCurrency\": \"<string>\",
  \"maxCollectionAmount\": \"<double>\",
  \"mandateIdentification\": \"<string>\",
  \"adjustmentAmount\": \"<double>\",
  \"adjustmentCategory\": \"<string>\",
  \"adjustmentRate\": \"<double>\",
  \"authenticationCode\": \"<string>\",
  \"authenticationDate\": \"<date>\",
  \"authenticationInstrument\": \"<string>\",
  \"authenticationType\": \"<string>\",
  \"clientContractReference\": \"<string>\",
  \"clientRequestReference\": \"<string>\",
  \"collectionFrequency\": \"<string>\",
  \"collectionDay\": \"<string>\",
  \"collectionType\": \"<string>\",
  \"currency\": \"<string>\",
  \"dateAdjustmentAllowed\": \"<boolean>\",
  \"debitValueType\": \"<string>\",
  \"entryClass\": \"<string>\",
  \"firstCollectionIdentifier\": \"<string>\",
  \"firstCollectionDate\": \"<date>\",
  \"firstCollectionAmount\": \"<double>\",
  \"firstCollectionCurrency\": \"<string>\",
  \"initiationDate\": \"<date>\",
  \"instalmentAmount\": \"<double>\",
  \"instalmentOccurrence\": \"<string>\",
  \"clientSegment\": \"<string>\",
  \"trackingAllowed\": \"<boolean>\",
  \"trackingDays\": \"<integer>\",
  \"useAmountAdjustment\": \"<boolean>\",
  \"useRateAdjustment\": \"<boolean>\",
  \"releaseDate\": \"<date>\",
  \"debtor\": {
    \"name\": \"irur\",
    \"accountNumber\": \"do\",
    \"accountType\": \"par\",
    \"branchCode\": \"\",
    \"email\": \"e\",
    \"phoneNumber\": \"te\",
    \"identification\": \"si\",
    \"identificationType\": \"\"
  },
  \"creditor\": {
    \"accountNumber\": \"no\",
    \"accountName\": \"sit\",
    \"branchCode\": \"es\",
    \"email\": \"la\",
    \"phoneNumber\": \"te\",
    \"schemeName\": \"do\",
    \"shortName\": \"mi\",
    \"ultimateName\": \"o\"
  }
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationAmendRequestProcessing result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckAmendmentOnAMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"status\": 60443271,\r\n  \"title\": \"Lorem nostrud id in enim\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestRequestDebiCheckCancellationOnAMandate 
        /// </summary>
        [Test]
        public async Task TestRequestDebiCheckCancellationOnAMandate() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RequestDebiCheckCancellationOnAMandateRequest body = APIHelper.JsonDeserialize<Standard.Models.RequestDebiCheckCancellationOnAMandateRequest>("{
  \"bank\": \"<string>\",
  \"cancellationReasonCode\": \"<string>\",
  \"debiCheckAuthKey\": \"<string>\"
}");

            // Perform API call
            Standard.Models.DebicheckAuthenticationCancelRequested result = null;

            try
            {
                result = await controller.CreateRequestDebiCheckCancellationOnAMandateAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(202, httpCallBackHandler.Response.StatusCode,
                    "Status should be 202");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"authReference\": \"culpa adipisicing\",\r\n  \"status\": 9286900,\r\n  \"title\": \"fugiat sunt\"\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

    }
}