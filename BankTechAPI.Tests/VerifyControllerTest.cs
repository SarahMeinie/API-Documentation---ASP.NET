/*
 * BankTechAPI.Tests
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Utilities; 
using BankTechAPI.Standard.Http.Client;
using BankTechAPI.Standard.Http.Response;
using BankTechAPI.Tests.Helpers;
using NUnit.Framework;
using BankTechAPI.Standard;
using BankTechAPI.Standard.Controllers;
using BankTechAPI.Standard.Exceptions;

namespace BankTechAPI.Tests
{
    [TestFixture]
    public class VerifyControllerTest : ControllerTestBase
    {
        /// <summary>
        /// Controller instance (for all tests)
        /// </summary>
        private static VerifyController controller;

        /// <summary>
        /// Setup test class
        /// </summary>
        [SetUp]
        public static void SetUpClass()
        {
            controller = GetClient().Verify;
        }

        /// <summary>
        /// TODO: Add description for test TestSouthAfricanIDNumberVerification 
        /// </summary>
        [Test]
        public async Task TestSouthAfricanIDNumberVerification() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.SouthAfricanIDNumberVerificationRequest body = APIHelper.JsonDeserialize<Standard.Models.SouthAfricanIDNumberVerificationRequest>("{
  \"idNumber\": \"<string>\",
  \"yourReference\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateSouthAfricanIDNumberVerificationAsync(xApiVersion, contentType, body);
            }
            catch(AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(500, httpCallBackHandler.Response.StatusCode,
                    "Status should be 500");

        }

        /// <summary>
        /// TODO: Add description for test TestRealTimeSouthAfricanHomeAffairsIDNumberVerification 
        /// </summary>
        [Test]
        public async Task TestRealTimeSouthAfricanHomeAffairsIDNumberVerification() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.RealTimeSouthAfricanHomeAffairsIDNumberVerificationRequest body = APIHelper.JsonDeserialize<Standard.Models.RealTimeSouthAfricanHomeAffairsIDNumberVerificationRequest>("{
  \"idNumber\": \"<string>\",
  \"yourReference\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateRealTimeSouthAfricanHomeAffairsIDNumberVerificationAsync(xApiVersion, contentType, body);
            }
            catch(ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(503, httpCallBackHandler.Response.StatusCode,
                    "Status should be 503");

        }

        /// <summary>
        /// TODO: Add description for test TestFindTheIDNumberFromAContactNumber 
        /// </summary>
        [Test]
        public async Task TestFindTheIDNumberFromAContactNumber() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.FindTheIDNumberFromAContactNumberRequest body = APIHelper.JsonDeserialize<Standard.Models.FindTheIDNumberFromAContactNumberRequest>("{
  \"contactNumber\": \"<string>\",
  \"yourReference\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateFindTheIDNumberFromAContactNumberAsync(xApiVersion, contentType, body);
            }
            catch(AnUnexpectedErrorHasOccuredPleaseContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(500, httpCallBackHandler.Response.StatusCode,
                    "Status should be 500");

        }

        /// <summary>
        /// TODO: Add description for test TestCreditBureauDataWithoutIDVerification 
        /// </summary>
        [Test]
        public async Task TestCreditBureauDataWithoutIDVerification() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.CreditBureauDataWithoutIDVerificationRequest body = APIHelper.JsonDeserialize<Standard.Models.CreditBureauDataWithoutIDVerificationRequest>("{
  \"idNumber\": \"<string>\",
  \"yourReference\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateCreditBureauDataWithoutIDVerificationAsync(xApiVersion, contentType, body);
            }
            catch(UnauthorizedRequestException) {};

            // Test response code
            Assert.AreEqual(401, httpCallBackHandler.Response.StatusCode,
                    "Status should be 401");

        }

        /// <summary>
        /// TODO: Add description for test TestFintecAPISOwnUniqueAlgorithmToFICAYourClients 
        /// </summary>
        [Test]
        public async Task TestFintecAPISOwnUniqueAlgorithmToFICAYourClients() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.FintecAPISOwnUniqueAlgorithmToFICAYourClientsRequest body = APIHelper.JsonDeserialize<Standard.Models.FintecAPISOwnUniqueAlgorithmToFICAYourClientsRequest>("{
  \"idNumber\": \"<string>\",
  \"firstname\": \"<string>\",
  \"surname\": \"<string>\",
  \"enquiryReason\": \"<string>\",
  \"yourReference\": \"<string>\",
  \"street\": \"<string>\",
  \"suburb\": \"<string>\",
  \"city\": \"<string>\",
  \"province\": \"<string>\",
  \"poCode\": \"<string>\",
  \"dateRange\": \"<string>\",
  \"minimumMatch\": \"<string>\",
  \"secondname\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateFintecAPISOwnUniqueAlgorithmToFICAYourClientsAsync(xApiVersion, contentType, body);
            }
            catch(ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(503, httpCallBackHandler.Response.StatusCode,
                    "Status should be 503");

        }

        /// <summary>
        /// TODO: Add description for test TestBankAccountVerificationReport 
        /// </summary>
        [Test]
        public async Task TestBankAccountVerificationReport() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.BankAccountVerificationReportRequest body = APIHelper.JsonDeserialize<Standard.Models.BankAccountVerificationReportRequest>("{
  \"verificationType\": \"<string>\",
  \"bankName\": \"<string>\",
  \"accNumber\": \"<string>\",
  \"accType\": \"<string>\",
  \"yourReference\": \"<string>\",
  \"companyRegNo\": \"<string>\",
  \"companyName\": \"<string>\",
  \"idNumber\": \"<double>\",
  \"initials\": \"<string>\",
  \"surname\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateBankAccountVerificationReportAsync(xApiVersion, contentType, body);
            }
            catch(UnauthorizedRequestException) {};

            // Test response code
            Assert.AreEqual(401, httpCallBackHandler.Response.StatusCode,
                    "Status should be 401");

        }

        /// <summary>
        /// TODO: Add description for test TestABSABankAccountVerificationReport 
        /// </summary>
        [Test]
        public async Task TestABSABankAccountVerificationReport() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.ABSABankAccountVerificationReportRequest body = APIHelper.JsonDeserialize<Standard.Models.ABSABankAccountVerificationReportRequest>("{
  \"bank\": \"<string>\",
  \"branchCode\": \"<string>\",
  \"accountNumber\": \"<string>\",
  \"accountType\": \"<string>\",
  \"idType\": \"<string>\",
  \"idNumber\": \"<string>\",
  \"surname\": \"<string>\",
  \"initials\": \"<string>\",
  \"emailAddress\": \"<string>\",
  \"phoneNumber\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateABSABankAccountVerificationReportAsync(xApiVersion, contentType, body);
            }
            catch(BadRequestException) {};

            // Test response code
            Assert.AreEqual(400, httpCallBackHandler.Response.StatusCode,
                    "Status should be 400");

        }

        /// <summary>
        /// TODO: Add description for test TestCDVBankAccountVerification 
        /// </summary>
        [Test]
        public async Task TestCDVBankAccountVerification() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            List<Standard.Models.CDVBankAccountVerificationRequest> body = APIHelper.JsonDeserialize<List<Standard.Models.CDVBankAccountVerificationRequest>>("[
  {
    \"accountNumber\": \"<string>\",
    \"accountType\": \"<string>\",
    \"branchCode\": \"<string>\"
  },
  {
    \"accountNumber\": \"<string>\",
    \"accountType\": \"<string>\",
    \"branchCode\": \"<string>\"
  }
]");

            // Perform API call
            List<Standard.Models.CDVResult> result = null;

            try
            {
                result = await controller.CreateCDVBankAccountVerificationAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsArrayOfJsonObjectsProperSubsetOf(
                    "[\r\n  {\r\n    \"valid\": false,\r\n    \"status\": 28718826,\r\n    \"title\": \"esse pariatur in sit\"\r\n  },\r\n  {\r\n    \"valid\": false,\r\n    \"status\": 85657754,\r\n    \"title\": \"irure deserunt ut in\"\r\n  }\r\n]", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

        /// <summary>
        /// TODO: Add description for test TestBankAccountVerificationJobStatus 
        /// </summary>
        [Test]
        public async Task TestBankAccountVerificationJobStatus() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.BankAccountVerificationJobStatusRequest body = APIHelper.JsonDeserialize<Standard.Models.BankAccountVerificationJobStatusRequest>("{
  \"jobId\": \"<string>\"
}");

            // Perform API call

            try
            {
                await controller.CreateBankAccountVerificationJobStatusAsync(xApiVersion, contentType, body);
            }
            catch(ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(503, httpCallBackHandler.Response.StatusCode,
                    "Status should be 503");

        }

        /// <summary>
        /// TODO: Add description for test TestPingMethodToTestTheStatusOfTheService 
        /// </summary>
        [Test]
        public async Task TestPingMethodToTestTheStatusOfTheService() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;

            // Perform API call

            try
            {
                await controller.GetPingMethodToTestTheStatusOfTheServiceAsync(xApiVersion);
            }
            catch(ServiceIsCurrentlyUnavailablePleaseTryAgainLaterOrContactYourAdministratorException) {};

            // Test response code
            Assert.AreEqual(503, httpCallBackHandler.Response.StatusCode,
                    "Status should be 503");

        }

        /// <summary>
        /// CIPC - Uses the EnquiryID and EnquiryResultID from the company-match function to get the final file on the company. 
        /// </summary>
        [Test]
        public async Task TestGetTheCompanyCIPCSearchResults() 
        {
            // Parameters for the API call
            double xApiVersion = 1.0;
            string contentType = "application/json";
            Standard.Models.GetTheCompanyCIPCSearchResultsRequest body = APIHelper.JsonDeserialize<Standard.Models.GetTheCompanyCIPCSearchResultsRequest>("{
  \"company_detailsyourReference\": \"<string>\",
  \"company_detailsreg1\": \"<string>\",
  \"company_detailsreg2\": \"<string>\",
  \"company_detailsreg3\": \"<string>\",
  \"company_detailsbusinessName\": \"<string>\"
}");

            // Perform API call
            Standard.Models.ResponseSuccessfulCIPCMatchResultIsPositive result = null;

            try
            {
                result = await controller.CreateGetTheCompanyCIPCSearchResultsAsync(xApiVersion, contentType, body);
            }
            catch(APIException) {};

            // Test response code
            Assert.AreEqual(200, httpCallBackHandler.Response.StatusCode,
                    "Status should be 200");

            // Test headers
            Dictionary<string, string> headers = new Dictionary<string, string>();
            headers.Add("Content-Type", null);

            Assert.IsTrue(TestHelper.AreHeadersProperSubsetOf (
                    headers, httpCallBackHandler.Response.Headers),
                    "Headers should match");

            // Test whether the captured response is as we expected
            Assert.IsNotNull(result, "Result should exist");

            Assert.IsTrue(TestHelper.IsJsonObjectProperSubsetOf(
                    "{\r\n  \"businessInformation\": {\r\n    \"displayText\": \"cupidatat deserunt et\",\r\n    \"commercialName\": \"dolore\",\r\n    \"registrationNo\": \"aliquip laborum\",\r\n    \"businessStartDate\": \"ullamco deserunt reprehenderit ipsum\",\r\n    \"financialYearEnd\": \"pariatur incididunt\",\r\n    \"registrationNoOld\": \"est\",\r\n    \"commercialStatus\": \"dolore voluptate\",\r\n    \"commercialType\": \"nostrud Duis\",\r\n    \"sic\": \"consectetur esse in quis\",\r\n    \"taxNo\": \"aliqua Lorem in veniam\",\r\n    \"referenceNo\": \"in nostrud magna\",\r\n    \"externalReference\": \"voluptate officia mollit nulla aliqua\",\r\n    \"tradeName\": \"esse cupidatat\",\r\n    \"previousBussName\": \"enim incididunt amet in\",\r\n    \"physicalAddress\": \"incididunt Ut do\",\r\n    \"postalAddress\": \"qui tempor officia commodo\",\r\n    \"registrationDate\": \"dolore\",\r\n    \"businessDesc\": \"minim irure esse culpa\",\r\n    \"telephoneNo\": \"esse Excepteur\",\r\n    \"faxNo\": \"ullamco in\",\r\n    \"bussEmail\": \"laborum cupidatat tempor amet aute\",\r\n    \"bussWebsite\": \"ipsum fugiat Lorem elit\",\r\n    \"noOfEnquiries\": \"fug\",\r\n    \"nameChangeDate\": \"aliqua aliquip nulla elit\",\r\n    \"ageofBusiness\": \"cupidatat dolor\",\r\n    \"authorisedCapitalAmt\": \"laborum\",\r\n    \"issuedNoOfShares\": \"consequat eu anim ullamco Ut\",\r\n    \"registrationNoConverted\": \"nostrud\",\r\n    \"financialEffectiveDate\": \"sint et labore\",\r\n    \"authorisedNoOfShares\": \"sint proident\",\r\n    \"issuedCapitalAmt\": \"culpa Ut nisi\",\r\n    \"commercialStatusDate\": \"enim cillum\",\r\n    \"directorCount\": \"reprehenderit ipsum\",\r\n    \"vatNo\": \"commodo\"\r\n  },\r\n  \"auditorInformation\": [\r\n    {\r\n      \"displayText\": \"adipisicing labore sunt\",\r\n      \"auditorName\": \"reprehenderit aute cupidatat ut laborum\",\r\n      \"professionNo\": \"nulla amet enim pariatur\",\r\n      \"professionDesc\": \"ipsum Ut aute\",\r\n      \"auditorTypeDesc\": \"eiusmod do\",\r\n      \"auditorStatusDesc\": \"Excepteur culpa laborum\",\r\n      \"lastUpdatedDate\": \"occaecat deserunt proident\",\r\n      \"postalAddress\": \"aliquip ut\",\r\n      \"physicalAddress\": \"cupidatat eu irure\",\r\n      \"telephoneNo\": \"eu Lorem consectetur occaecat\",\r\n      \"yearswithAuditor\": \"voluptate aliquip sunt\",\r\n      \"actStartdate\": \"occaecat\",\r\n      \"actEndDate\": \"irure ut qui sit\",\r\n      \"noOfYearsInbBusiness\": \"minim\"\r\n    },\r\n    {\r\n      \"displayText\": \"in nisi\",\r\n      \"auditorName\": \"est consectetur\",\r\n      \"professionNo\": \"deserunt nisi non magna\",\r\n      \"professionDesc\": \"velit nostrud non magna\",\r\n      \"auditorTypeDesc\": \"minim incididunt\",\r\n      \"auditorStatusDesc\": \"dolor velit id reprehenderit mollit\",\r\n      \"lastUpdatedDate\": \"s\",\r\n      \"postalAddress\": \"aliquip dolore\",\r\n      \"physicalAddress\": \"adipisicing incididunt aliquip\",\r\n      \"telephoneNo\": \"nisi velit consectetur amet\",\r\n      \"yearswithAuditor\": \"tempor quis\",\r\n      \"actStartdate\": \"incididunt consectetur exercitation\",\r\n      \"actEndDate\": \"mollit\",\r\n      \"noOfYearsInbBusiness\": \"incididunt eiusmod non labore\"\r\n    }\r\n  ],\r\n  \"directorInformation\": [\r\n    {\r\n      \"displayText\": \"nostrud occaecat id dolore\",\r\n      \"directorID\": \"nulla aliqua\",\r\n      \"idNo\": \"elit aliquip ipsum mollit\",\r\n      \"firstName\": \"occaecat veniam sunt\",\r\n      \"initials\": \"d\",\r\n      \"surname\": \"ullamco aliqua sit quis\",\r\n      \"secondName\": \"consequat reprehenderit dolore\",\r\n      \"birthDate\": \"irure officia\",\r\n      \"directorStatusCode\": \"minim velit in laboris sit\",\r\n      \"appointmentDate\": \"in magna officia laborum velit\",\r\n      \"designation\": \"nostrud dolore\",\r\n      \"memberSize\": \"aliquip dolor amet laboris ea\",\r\n      \"memberControlPerc\": \"culpa\",\r\n      \"directorIndicator\": \"irure\",\r\n      \"principalType\": \"laboris adipisicing magna fugiat nulla\",\r\n      \"cM29Date\": \"nulla eiusmod ea esse\",\r\n      \"isrsaResident\": \"et\",\r\n      \"countryCode\": \"dolor Lorem ea ad\",\r\n      \"isidVerified\": \"exercitation\",\r\n      \"isciproConfirmed\": \"pariatur deserunt consequat sunt\",\r\n      \"physicalAddress\": \"nisi m\",\r\n      \"postalAddress\": \"Duis aliquip do mollit\",\r\n      \"name\": \"tempor magna anim v\",\r\n      \"homeTelephoneNo\": \"aute in ut pariatur\",\r\n      \"workTelephoneNo\": \"occaecat ipsum exercitation mollit co\",\r\n      \"cellularNo\": \"sed non occaecat mollit reprehenderit\",\r\n      \"emailAddress\": \"nisi eiusmod officia\",\r\n      \"age\": \"deserunt dolor dolore nulla\",\r\n      \"yearsWithBusiness\": \"dolor do ea enim non\",\r\n      \"fullname\": \"velit et reprehenderit\",\r\n      \"surnamePrevious\": \"nisi sint eu ut reprehenderit\",\r\n      \"directorStatusDate\": \"Duis tempor\",\r\n      \"memberControlType\": \"ut deserunt\",\r\n      \"executor\": \"ullamco magna ipsum\",\r\n      \"executorAppointmentDate\": \"exercitation lab\",\r\n      \"estate\": \"dolore quis aliquip\",\r\n      \"resignationDate\": \"fugiat occaecat adipisicing\"\r\n    },\r\n    {\r\n      \"displayText\": \"enim ut Ut\",\r\n      \"directorID\": \"irure dolore labore adipisicing\",\r\n      \"idNo\": \"Duis anim\",\r\n      \"firstName\": \"ipsum laboris\",\r\n      \"initials\": \"id eu culpa Lorem\",\r\n      \"surname\": \"laboris Ut sint\",\r\n      \"secondName\": \"aute\",\r\n      \"birthDate\": \"ex esse\",\r\n      \"directorStatusCode\": \"nisi magna ad\",\r\n      \"appointmentDate\": \"Ut sunt irure\",\r\n      \"designation\": \"irure Duis\",\r\n      \"memberSize\": \"minim dolore \",\r\n      \"memberControlPerc\": \"incididunt Ut consequat\",\r\n      \"directorIndicator\": \"sint\",\r\n      \"principalType\": \"deserunt amet nisi id\",\r\n      \"cM29Date\": \"occaecat consequat\",\r\n      \"isrsaResident\": \"magna\",\r\n      \"countryCode\": \"id Excepteur anim esse\",\r\n      \"isidVerified\": \"reprehenderit id\",\r\n      \"isciproConfirmed\": \"labore nulla ex\",\r\n      \"physicalAddress\": \"mollit est ad sunt\",\r\n      \"postalAddress\": \"id veniam dolore voluptate\",\r\n      \"name\": \"eiusmod consequat non\",\r\n      \"homeTelephoneNo\": \"ex reprehenderit est\",\r\n      \"workTelephoneNo\": \"pariatur in\",\r\n      \"cellularNo\": \"Lorem eu\",\r\n      \"emailAddress\": \"ullamco commodo magna\",\r\n      \"age\": \"irure sunt ex Duis\",\r\n      \"yearsWithBusiness\": \"in dolor sunt dolor\",\r\n      \"fullname\": \"aliquip tempor commodo nostrud cillum\",\r\n      \"surnamePrevious\": \"sit eu nostrud est\",\r\n      \"directorStatusDate\": \"cillum commodo nostrud laboris\",\r\n      \"memberControlType\": \"e\",\r\n      \"executor\": \"esse\",\r\n      \"executorAppointmentDate\": \"pariatur officia in aliqua\",\r\n      \"estate\": \"elit amet sed\",\r\n      \"resignationDate\": \"officia tempor elit eu\"\r\n    }\r\n  ]\r\n}", 
                    TestHelper.ConvertStreamToString(httpCallBackHandler.Response.RawBody), 
                    false, true, false),
                    "Response body should have matching keys");
        }

    }
}